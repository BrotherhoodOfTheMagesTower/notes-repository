@page "/calendar"
@using NotesRepository.Data.Models
@using Radzen
@using NotesRepository.Services
@using NotesRepository.Repositories

@inject NoteService noteService
@inject EventService eventService
@inject UserRepository userRepository
@inject DialogService DialogService
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@inject IToastService toastService;
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource> localizer


<PageTitle>@title</PageTitle>
<HeadContent>
    <meta name="description" content="@description">
</HeadContent>

<div class = "Calendar" style="display:flex; align-items:center; justify-content:center;">
<RadzenExample Name="Scheduler" AdditionalSourceCodePages=@(new List<string>() { "AddEventPage.razor", "EditEventPage.razor" })/>
    <RadzenScheduler @ref=@scheduler LoadData=@OnLoad SlotRender=@OnSlotRender style="height: 768px; width:70%;" TItem="Event" Data=@data StartProperty="StartAt" EndProperty="EndAt"
        TextProperty="Content" SelectedIndex="2"
        SlotSelect=@OnSlotSelect AppointmentSelect=@OnEventSelect AppointmentRender=@OnEventRender>
        <RadzenDayView Text=@localizer["Day"] />
        <RadzenWeekView Text=@localizer["Week"] />
        <RadzenMonthView Text=@localizer["Month"] />
    </RadzenScheduler>
</div>
@code {
    RadzenScheduler<Event> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    private string description = "calendar page";
    private string title = "calendar";
    Event model = new Event();

    ICollection<Event> data;



    void OnSlotRender(SchedulerSlotRenderEventArgs args) 
    {

        if (args.View.Text == @localizer["Month"] && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }


        if ((args.View.Text == @localizer["Week"] || args.View.Text == @localizer["Day"]) && args.Start.Hour > 6 && args.Start.Hour < 16)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }
    async Task OnLoad()
    {
        ApplicationUser loggedUser = await userRepository.GetUserByEmailAsync(httpContextAccessor.HttpContext.User.Identity.Name);
        model.User = loggedUser;
        data = await eventService.GetAllUserEventsAsync(loggedUser.Id);

    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        if (args.Start < DateTime.Now.AddDays(-1))
        {
            toastService.ShowError("You cannot add an event before today","OOPS!");
        }
        else
        {
            Event datas = await DialogService.OpenAsync<AddEventPage>(@localizer["addEvent"],
                new Dictionary<string, object> { { "StartAt", args.Start }, { "EndAt", args.End } });
          
            if (datas != null)
            {
                data.Add(datas);
                await scheduler.Reload();

            }
        }
    }
      async Task OnEventSelect(SchedulerAppointmentSelectEventArgs<Event> args)
    {


        await DialogService.OpenAsync<EditEventPage>(@localizer["editEvent"], new Dictionary<string, object> { { "Event", args.Data } });
        await scheduler.Reload();
        
    }

    void OnEventRender(SchedulerAppointmentRenderEventArgs<Event> args)
    {

        // Manually styling when reminder exists
        if (args.Data.ReminderAt!=null)
        {
           args.Attributes["style"] = "background: rgba(232,73,73,0.8);";
        }
    }

}