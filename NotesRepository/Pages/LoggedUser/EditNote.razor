@page "/editNote/{templateIndex}"

@using Markdig
@using NotesRepository.Data.Models
@using NotesRepository.Repositories
@using NotesRepository.Services
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations;
@using Data.Constants;

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource> localizer
@inject NavigationManager navigationManager
@inject NoteService _ns;
@inject UserRepository _ur;
@inject ImageService _is;
@inject DirectoryService _ds;
@inject CollaboratorsNotesService _cns;
@inject Data.Flags flags;
@inject IToastService toastService;

<PageTitle>@title</PageTitle>
<HeadContent>
    <meta name="description" content="@description">
</HeadContent>

@if (content is null || imagesFromUser is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="my-container">
        <div class="my-sub-container p-2 ">
            <center>
                    @if(@validId && @noteFromDb is not null)
                    {
                        <h3>@noteFromDb.Title @noteFromDb.IconName</h3>
                    }
                    else
                    {
                        <h3>@localizer["content"]</h3> 
                    }
            </center>
            <textarea class="my-text-area" @bind-value="content" @bind-value:event="oninput"></textarea>
            <center>
                <row>
                    @if(@validId && @noteFromDb is not null)
                    {
                        <colulmn>
                            <InputFile OnChange="@LoadFile" accept=".jpg, .png"/>
                        </colulmn>
                    }
                    else
                    {
                        <h4>@localizer["toUpload"]</h4>
                    }
                    <colulmn>
                        <button type="button" class="btn btn-primary" @onclick="saveNote">@localizer["save"]</button>
                    </colulmn>
                </row>
            </center>
        </div>
        <div class="my-sub-container p-2">
            <center><h3>@localizer["preview"]</h3></center>
            <div class="my-preview">
                @((MarkupString)Markdown.ToHtml(content, pipeline))
            </div>
        </div>
            <center>
            @if(imagesFromUser.Count > 0)
            {
                <div>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Image</th>
                                <th>URL</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach(var image in imagesFromUser)
                        { 
                            <tr>
                                <th>@image.Name</th>
                                <th>@image.FileUrl</th>
                                <th><button type="button" class="btn btn-primary" @onclick="() => deleteImageFromNote(image)">@localizer["delete"]</button></th>
                            </tr>        
                        }
                        </tbody>
                    </table>
                </div>
            }
            </center>

            <center>  
                <div>
                @if (collaborators.Count > 0)
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Collaborator's e-mail</th>
                                <th>Collaborator's name and surname</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var collaborator in collaborators)
                            {
                                <tr>
                                    <th>@collaborator.Email</th>
                                    <th>@collaborator.FirstName @collaborator.LastName</th>
                                    <th><button type="button" class="btn btn-primary" @onclick="() => deleteCollaboratorFromNote(collaborator)">@localizer["delete"]</button></th>
                                </tr>
                            }
                              </tbody>
                    </table>
                }
            <label>collaborator's email</label>
            <input class="d-block mb-1 ml-1" @bind-value="collaboratorEmail"></input>
            <button type="button" class="btn btn-primary" @onclick="() => addCollaboratorToNote()">@localizer["add"]</button>
             
            </div>
            
            </center>
    </div>
}

@code
{
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter] public string templateIndex { get; set; }
    private string content = "";
    private MarkdownPipeline? pipeline;
    private bool validId = false;
    private Guid parsedId;
    private List<Image> imagesFromUser;
    private string description = "edit note";
    private string title = "edit note";
    private Note? noteFromDb;
    private List<ApplicationUser> collaborators;
    private string collaboratorEmail;



    protected override async Task OnParametersSetAsync()
    {
        noteFromDb = null;

        int numberOfWaits = 1;
        while(flags.getNavMenuLoadingStatus())
        {
            System.Console.WriteLine($"Thread number {Thread.CurrentThread.ManagedThreadId} from {navigationManager.Uri} -> waits {numberOfWaits++ * 5} [ms] for NavMenu to render.");
            Thread.Sleep(5); // Wait 5 ms until navbar ends rendering
        }

        imagesFromUser = new List<Image>();
        collaborators = new List<ApplicationUser>();

        content = templateIndex == "newNote" ? "" : await init();
        pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build(); // Uruchomienie rozszerzeń markdown
    }

    private async Task saveNote()
    {
        if (content.Length <= 0)
        {
            toastService.ShowError("Your note is empty.", "OOPS!");
        }
        else if(content.Length > 13500)
        {
            toastService.ShowError("Your note is too big.", "OOPS!");
        }
        else
        {
            try
            {
                // Making popup
                var parameters = new ModalParameters();

                if (noteFromDb != null)
                {
                    parameters = new ModalParameters();
                    parameters.Add(nameof(content), content);
                    parameters.Add(nameof(noteFromDb), noteFromDb);
                }
                else
                {
                    parameters = new ModalParameters();
                    parameters.Add(nameof(content), content);
                }

                var saveForm = Modal.Show<SaveNote>(localizer["saveNote"], parameters);
                var result = await saveForm.Result;

                // We must check if user cancel popup (null) or submit form (result.data == Guid)
                if (result.Data != null)
                {
                    var tmpGuid = new Guid();
                    if (Guid.TryParse(result.Data.ToString(), out tmpGuid))
                    {
                        var uri = "/editNote/" + result.Data.ToString();
                        navigationManager.NavigateTo(uri);
                    }
                }
            }
            catch(Exception e)
            {
                toastService.ShowError(e.Message, "OOPS!");
            }
        }
    }

    private async Task<string> init() // TODO narazie init obsługuje tylko wczytywanie templateów, trzeba dodać obsługę wczytywania z bazy
    {
        if (templateIndex is not null)
        {
            validId = Guid.TryParse(templateIndex, out parsedId);
            if (validId == false)
            {
                return Templates.NotesTemplates[templateIndex];
            }
            else
            {
                string? currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (currentUserId != null)
                {
                    noteFromDb = await _ns.GetNoteByIdAsync(Guid.Parse(templateIndex));

                    if (noteFromDb is not null)
                    {
                        collaborators =(await _cns.GetAllCollaboratorsForNoteAsync(noteFromDb.NoteId)).ToList();
                    }

                    if (noteFromDb is not null)
                    {
                        var noteImages = await _is.GetAllNoteImagesAsync(noteFromDb.NoteId);

                        if (noteImages.Count > 0)
                        {
                            foreach (var image in noteImages)
                            {
                                imagesFromUser.Add(image);
                            }
                        }
                        return noteFromDb.Content;
                    }
                    else
                    {
                        return " ";
                    }
                }
                else
                {
                    return " ";
                }
            }
        }
        else
        {
            return " ";
        }
    }

    private async void LoadFile(InputFileChangeEventArgs e) // TODO wprowadzanie więcej niż jednego pliku
    {
        var image = await e.File.RequestImageFileAsync("image/jpg", 1920, 1080);
        if (image != null)
        {
            try
            {
                if (image.Name.Contains(' '))
                    throw new Exception("Image name contains white characters!");

                string? currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (currentUserId != null)
                {
                    var loggedUser = await _ur.GetUserByIdAsync(currentUserId);
                    Image newImage;
                    if (noteFromDb != null)
                    {
                        var uniqueImageName = /* generateUniqueCharacters() + */ image.Name;    // TODO unikalna ścieżka
                        newImage = new Image(null, uniqueImageName, "", noteFromDb);
                        var resultAndUrl = await _is.AddImageAsync(newImage, image);            // First element is bool value, second is a url to image
                        if (resultAndUrl.Item1)
                        {
                            content += $"\n![{image.Name}]({resultAndUrl.Item2})\n";
                            imagesFromUser.Add(newImage);
                            this.StateHasChanged();
                        }
                    }
                }
            }
            catch(Exception exception)
            {
                toastService.ShowError(exception.Message, "OOPS!");
            }
        }
        else
        {
            toastService.ShowError("A wrong file has been entered.", "OOPS!");
        }
    }

    // TODO usuwanie zdjęcia z danej notatki -> przycisk w tabeli -> usuwanie zdjęcia z Azure
    private async void deleteImageFromNote(Image image)
    {
        string? currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (currentUserId != null)
        {
            try
            {
                var result = await _is.DeleteImageAsync(image);
                if (result)
                {
                    toastService.ShowSuccess("Image has been deleted");
                    string substringWithImage = $"![{image.Name}]({image.FileUrl})"; // TODO nie działa do końca 
                    content.Replace(substringWithImage, " ");
                    imagesFromUser.Remove(image);
                }
                else
                {
                    toastService.ShowError("Something went wrong!");
                }
                this.StateHasChanged();
            }
            catch(Exception e)
            {
                // DEBUG potem mnie proszę usunąć
                toastService.ShowError(e.Message);
            }
        }
    }

    private async void deleteCollaboratorFromNote(ApplicationUser collaborator)
    {
        await _cns.DeleteCollaboratorFromNoteAsync(collaborator.Id, noteFromDb.NoteId);
    }

    private async void addCollaboratorToNote()
    {
        var collaboratorToAdd = await _ur.GetUserByEmailAsync(collaboratorEmail);
        string? currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if(collaboratorToAdd == null)
            toastService.ShowError("User doesn't exists!"); 

        else if(collaboratorToAdd.Id == currentUserId)
            toastService.ShowError("You can't add yourself as a collaborator!"); 

        else if(collaborators.Contains(collaboratorToAdd))
            toastService.ShowError("Collaborator is already added!"); 
        else 
        {
            await _cns.AddCollaboratorToNoteAsync(collaboratorToAdd.Id, noteFromDb.NoteId);
            toastService.ShowSuccess("Collaborator was sucessfully added!"); 
        }
        
    }

    private string generateUniqueCharacters()
    {
        string guid = Guid.NewGuid().ToString();
        var split = guid.Split('-');
        return split[0];
    }
}