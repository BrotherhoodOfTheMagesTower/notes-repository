@page "/editNote/{templateIndex}"

@using Markdig
@using NotesRepository.Data.Models
@using NotesRepository.Repositories
@using NotesRepository.Services
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations;
@using Data.Constants;

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource> localizer
@inject NavigationManager navigationManager
@inject NoteService _ns;
@inject UserRepository _ur;
@inject IToastService toastService;

@if (content is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="my-container">
        <div class="my-sub-container p-2 ">
            <center><h3>@localizer["content"]</h3> </center>
            <textarea class="my-text-area" @bind-value="content" @bind-value:event="oninput"></textarea>
            <center>
                <button type="button" class="btn btn-primary" @onclick="saveNote">@localizer["save"]</button>
            </center>
        </div>
        <div class="my-sub-container p-2">
            <center><h3>@localizer["preview"]</h3></center>
            <div class="my-preview">
                @((MarkupString)Markdown.ToHtml(content, pipeline))
            </div>
        </div>
    </div>
}

@code
{
    [Parameter]
    public string templateIndex { get; set; }
    private string content = "";
    private MarkdownPipeline? pipeline;
    private bool validId = false;
    private Guid parsedId;

    protected override async Task OnParametersSetAsync()
    {
        content = await init();
        pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build(); // Uruchomienie rozszerzeń markdown
    }

    private async Task saveNote()
    {
        if (content.Length <= 0)
        {
            toastService.ShowError("Your note is empty.", "OOPS!");
        }
        else
        {
            string? currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (currentUserId != null)
            {
                var usr = await _ur.GetUserByIdAsync(currentUserId);
                if (usr is not null)
                {
                    var result = await _ns.AddNoteAsync(new Note(null, "default", content, "", usr, new Directory("Def", usr)));
                    if (result)
                        toastService.ShowSuccess("The note was saved.", "Congrats!");
                }
            }

        }
    }

    private async Task<string> init() // TODO narazie init obsługuje tylko wczytywanie templateów, trzeba dodać obsługę wczytywania z bazy
    {
        if (templateIndex is null)
        {
            validId = Guid.TryParse(templateIndex, out parsedId);
            if (validId == false)
            {
                return Templates.NotesTemplates[templateIndex];
            }
            else
            {
                var note = await _ns.GetNoteByIdAsync(Guid.Parse(templateIndex));
                if (note is not null)
                {
                    return note.Content;
                }
                else
                {
                    return " ";    //TODO 404
                }
            }
        }
        else
        {
             return " ";
        }
    }
    }
}