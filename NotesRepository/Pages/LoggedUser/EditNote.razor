@page "/editNote"

@using Markdig
@using NotesRepository.Data.Models
@using NotesRepository.Repositories
@using NotesRepository.Services
@using System.Security.Claims
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor

@inject NoteService _ns;
@inject UserRepository _ur;

@inject IToastService toastService;

@if (content is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="my-container">
        <div class="my-sub-container p-2 ">
            <center><h3>Content</h3> </center>
            <textarea class="my-text-area" @bind-value="content" @bind-value:event="oninput"></textarea>
            <center>
                <button type="button" class="btn btn-primary" @onclick="saveNote">Save</button>
            </center>
        </div>
        <div class="my-sub-container p-2">
             <center><h3>Preview</h3></center>
            <div class="my-preview">
                @((MarkupString)Markdown.ToHtml(content, pipeline))
            </div>
        </div>
    </div>
}

@code
{
    // TODO przykładowy template, potem musimy ładować te przez nas przygotowane
    private string content = "";
    private MarkdownPipeline? pipeline;

    protected override async Task OnParametersSetAsync()
    {
        content = init(); // TODO wczytujemy z bazy danych albo przekazujemy je z frontu
        pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build(); // Uruchomienie rozszerzeń markdown
    }

    private async Task saveNote()
    {
        if (content.Length <= 0)
        {
            toastService.ShowError("Your note is empty.", "OOPS!");
        }
        else
        {
            string? currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (currentUserId != null)
            {
                var usr = await _ur.GetUserByIdAsync(currentUserId);
                if (usr is not null)
                {
                    var result = await _ns.AddNoteAsync(new Note(null, "default", content, "", usr, new Directory("Def", usr)));
                    if (result)
                        toastService.ShowSuccess("The note was saved.", "Congrats!");
                }
            }

        }
    }

    private string init()
    {
        return @"Template
~~Przekreślenie~~ tekstu

---
lub
___

> Akapit? Czy coś innego Xd

[Mój Github](https://github.com/jacek13)

> Lista:
* element 1
* element 2
* element 3
    * dzieli sie na pod element
    * podelement prim

> Lista numerowana:
1. element 1
2. element 2
3. element 3

`Jakis tekst`

![zdjecie](https://avatars.githubusercontent.com/u/56163434?s=400&u=b60309cd30e98cc4c84079a406350c6d4b6f9c20&v=4)
";
    }
}