@using NotesRepository.Data.Models
@using NotesRepository.Repositories
@using NotesRepository.Services

@inject DialogService DialogService
@inject IToastService toastService;
@inject NoteService noteService;
@inject UserRepository userRepository;
@inject EventService eventService;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource> localizer

<RadzenTemplateForm TItem="Event" Data="@model" Submit=@OnSubmit>
<div class="row" style="margin-bottom: 16px">
    <div class="col-md-3">
        <RadzenLabel Text=@localizer["Text"] />
    </div>
    <div class="col">
        <RadzenTextBox @bind-Value="@model.Content" Name="Content" />
        <RadzenRequiredValidator Text=@localizer["titleIsRequired"] Component="Content" />
    </div>
</div>
<div class="row" style="margin-bottom: 16px">
    <div class="col-md-3">
        <RadzenLabel Text=@localizer["Start"] />
    </div>
    <div class="col">
        <RadzenDatePicker @bind-Value="@model.StartAt" Name="StartAt" ShowTime="true" />
        <RadzenRequiredValidator Text=@localizer["startIsRequired"] Component="StartAt" />
    </div>
</div>
<div class="row" style="margin-bottom: 16px">
    <div class="col-md-3">
        <RadzenLabel Text=@localizer["End"] />
    </div>
    <div class="col">
        <RadzenDatePicker Name="EndAt" @bind-Value="@model.EndAt" ShowTime="true" />
        <RadzenRequiredValidator Component="EndAt" Text=@localizer["endIsRequired"] />
    </div>
</div>
<div class="row">
    <div class="col-md-3"></div>
    <div class="col">
      <div class="form-check my-2">
     @if (model.ReminderAt!=null)
                {
                    
                    <input class="form-check-input" type="checkbox" @bind-value="IsAgreeToGetReminder"  id="checkingReminder" checked disabled> 
                     <label class="form-check-label" for="flexCheckDefault">
                     @localizer["setReminder"]
                     </label>
                     
                    <div class="col">
                        <RadzenDatePicker @bind-Value="@model.ReminderAt" Name="ReminderAt" ShowTime="true" DateFormat="dd/MM/yyyy HH:mm" HourFormat="24" />
                        <RadzenButton Click=@(args => OnClickDeleteReminder(model)) RadzenIcon Icon="delete" style="margin-top:2px; margin-left:25%;" ButtonStyle="ButtonStyle.Danger" />
                            <RadzenButton Click=@(args => OnClickEditReminder(model)) RadzenIcon Icon="open_in_browser" style="margin-top:2px;" ButtonStyle="ButtonStyle.Warning" />
                        
                        
                    </div>
                }
                else if(IsAgreeToGetReminder)
                {
                    <input class="form-check-input" type="checkbox" @bind-value="IsAgreeToGetReminder"  id="checkingReminder" checked> 
                     <label class="form-check-label" for="flexCheckDefault">
                     @localizer["setReminder"]
                     </label>
                     
                    <div class="col">
                    
                        <RadzenDatePicker @bind-Value="@model.ReminderAt" Name="ReminderAt" ShowTime="true" DateFormat="dd/MM/yyyy HH:mm" HourFormat="24" />
                        <RadzenButton Click=@(args => OnClickDeleteReminder(model)) RadzenIcon Icon="delete" style="margin-top:2px; margin-left:25%;" ButtonStyle="ButtonStyle.Danger" />
                        <RadzenButton Click=@(args => OnClickEditReminder(model)) RadzenIcon Icon="open_in_browser" style="margin-top:2px;" ButtonStyle="ButtonStyle.Warning" />
                        
                     </div>
                }
                
                else{
                <input class="form-check-input" type="checkbox" @bind-value="IsAgreeToGetReminder"  id="checkingReminder" > 
                     <label class="form-check-label" for="flexCheckDefault">
                     @localizer["setReminder"]
                     </label>
                }
</div>
    </div>
      <div class="col">
        <RadzenLabel Text=@localizer["noteTitle"] />
          <InputSelect @bind-Value="@noteId">
                @if (noteId==null)
                    {
                        <option selected value=>---</option>
                    }
                    else 
                    {
                        <option value=>---</option>
                        <option selected value=@note.NoteId>@note.Title</option>
                    }                 
                @foreach (var note in allNotes)
                {                   

                        <option value=@note.NoteId>@note.Title</option>
                    
                }
            </InputSelect>
    </div>
</div>
<div class="row">
    <div class="col-md-3"></div>
    <div class="col">
        <RadzenButton ButtonType="ButtonType.Submit" Text=@localizer["saveEvent"] />
    </div>
    <div class="col">
         <RadzenButton Click=@(args => OnClickDelete(model)) Text=@localizer["deleteEvent"] ButtonStyle="ButtonStyle.Danger" />
    </div>
</div>
</RadzenTemplateForm>
@code {
    [Parameter]
    public Event Event { get; set; }
    [Parameter]
    public bool IsAgreeToGetReminder { get; set; }
    [Parameter]
    public DateTime ReminderAt { get; set; }

    Event model = new Event();
    private List<Note>? allNotes = new();
    private Note note = new();
    private string noteId;

    protected override async Task OnInitializedAsync()
    {
        model = Event;
        ApplicationUser loggedUser = await userRepository.GetUserByEmailAsync(httpContextAccessor.HttpContext.User.Identity.Name);
        allNotes = await noteService.GetAllUserNotesWithoutEventAsync(loggedUser.Id);

        if(model.Note != null)
        {
            note = await noteService.GetNoteByIdAsync(model.Note.NoteId);
            noteId = note.NoteId.ToString();
        }
        else noteId = null;

    }



    async Task OnSubmit(Event model)
    {
        if (model.ReminderAt < DateTime.Now)
        {
            model.ReminderAt = null;
            DialogService.Close(model);
            toastService.ShowError("You set reminder before now", "Reminder reset!");
        }
        else
        {
            var attached = true;

            if (noteId != null && noteId != "")
                attached = await eventService.AttachNoteToEventAsync(model.EventId, Guid.Parse(noteId));
            else
            {
                //toastService.ShowError("it is not possible to detach the note from the event yet");
                attached = await eventService.DeleteNoteFromEventAsync(model.EventId);

            }
            var update = await eventService.UpdateAsync(model);

            DialogService.Close(model);
            if (update && attached)
                toastService.ShowSuccess("You have successfully edited an event");
            else
                toastService.ShowError("Something went wrong", "OOPS!");
        }

    }
    async Task OnClickDelete(Event model)
    {
        var returned = await eventService.GetByIdAsync(model.EventId);
        var deleteNote = true;
        if (noteId != null && noteId != "")
        {
            deleteNote = await eventService.DeleteNoteFromEventAsync(model.EventId);
        }
        var deleted = await eventService.DeleteAsync(model);

        DialogService.Close(model);
        if (deleted && deleteNote && returned != null)
            toastService.ShowSuccess("You have successfully deleted an event");
        else
            toastService.ShowError("Something went wrong","OOPS!");

    }
    async Task OnClickDeleteReminder(Event model)
    {

        await eventService.CancelEventReminderAsync(model);

    }
    async Task OnClickEditReminder(Event model)
    {
        if(model.ReminderAt<DateTime.Now)
        {
            model.ReminderAt = null;
            DialogService.Close(model);
            toastService.ShowError("You set reminder before now", "Reminder reset!");
        }
        else if (model.ReminderAt != null)
        {
            await eventService.EditEventReminderAsync(model);
        }
        else
        {
            model.ReminderAt = null;
            DialogService.Close(model);
            toastService.ShowError("Something went wrong","OOPS!");
        }


    }
} 