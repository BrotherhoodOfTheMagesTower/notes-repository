@using NotesRepository.Data.Models
@using NotesRepository.Repositories
@using NotesRepository.Services

@inject DialogService DialogService
@inject IToastService toastService;
@inject NoteService noteService;
@inject UserRepository userRepository;
@inject EventService eventService;
@inject NavigationManager navigationManager;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource> localizer

<AuthorizeView Context="Authorize">
    <Authorized>
        <RadzenTemplateForm TItem="Event" Data="@model" Submit=@OnSubmit>
            <div class="row" style="margin-bottom: 16px">
                <div class="col-md-3">
                    <RadzenLabel Text=@localizer["Text"] />
                </div>
                <div class="col">
                    <RadzenTextBox @bind-Value="@model.Content" Name="Content" />
                    <RadzenRequiredValidator Text=@localizer["titleIsRequired"] Component="Content" />
                </div>
            </div>
            <div class="row" style="margin-bottom: 16px">
                <div class="col-md-3">
                    <RadzenLabel Text=@localizer["Start"] />
                </div>
                <div class="col">
                    <RadzenDatePicker @bind-Value="@model.StartAt" Name="StartAt" ShowTime="true" />
                    <RadzenRequiredValidator Text=@localizer["startIsRequired"] Component="StartAt" />
                </div>
            </div>
            <div class="row" style="margin-bottom: 16px">
                <div class="col-md-3">
                    <RadzenLabel Text=@localizer["End"] />
                </div>
                <div class="col">
                    <RadzenDatePicker Name="EndAt" @bind-Value="@model.EndAt" ShowTime="true" />
                    <RadzenRequiredValidator Component="EndAt" Text=@localizer["endIsRequired"] />
                </div>
            </div>
            <div class="row">
                <div class="col-md-3"></div>
                <div class="col">
                    <div class="form-check my-2">
                        @if (model.ReminderAt != null)
                        {

                            <input class="form-check-input" type="checkbox" @bind-value="IsAgreeToGetReminder" id="checkingReminder" checked disabled>
                            <label class="form-check-label" for="flexCheckDefault">
                                @localizer["setReminder"]
                            </label>

                            <div class="col">
                                <RadzenDatePicker @bind-Value="@model.ReminderAt" Name="ReminderAt" ShowTime="true" DateFormat="dd/MM/yyyy HH:mm" HourFormat="24" />
                                <RadzenButton Click=@(args => OnClickDeleteReminder(model)) RadzenIcon Icon="delete" style="margin-top:2px; margin-left:25%;" ButtonStyle="ButtonStyle.Danger" />
                                <RadzenButton Click=@(args => OnClickEditReminder(model)) RadzenIcon Icon="open_in_browser" style="margin-top:2px;" ButtonStyle="ButtonStyle.Warning" />


                            </div>
                        }
                        else if (IsAgreeToGetReminder)
                        {
                            <input class="form-check-input" type="checkbox" @bind-value="IsAgreeToGetReminder" id="checkingReminder" checked>
                            <label class="form-check-label" for="flexCheckDefault">
                                @localizer["setReminder"]
                            </label>

                            <div class="col">

                                <RadzenDatePicker @bind-Value="@model.ReminderAt" Name="ReminderAt" ShowTime="true" DateFormat="dd/MM/yyyy HH:mm" HourFormat="24" />
                                <RadzenButton Click=@(args => OnClickDeleteReminder(model)) RadzenIcon Icon="delete" style="margin-top:2px; margin-left:25%;" ButtonStyle="ButtonStyle.Danger" />
                                <RadzenButton Click=@(args => OnClickEditReminder(model)) RadzenIcon Icon="open_in_browser" style="margin-top:2px;" ButtonStyle="ButtonStyle.Warning" />

                            </div>
                        }

                        else
                        {
                            <input class="form-check-input" type="checkbox" @bind-value="IsAgreeToGetReminder" id="checkingReminder">
                            <label class="form-check-label" for="flexCheckDefault">
                                @localizer["setReminder"]
                            </label>
                        }
                    </div>
                </div>
                <div class="col mb-2">
                    <RadzenLabel Text=@localizer["noteTitle"] />
                    <InputSelect @bind-Value="@noteId">
                        @if (noteId == null)
                        {
                            <option selected value=>---</option>
                        }
                        else
                        {
                            <option value=>---</option>
                            <option selected value=@note.NoteId>@note.Title</option>
                        }
                        @foreach (var note in allNotes)
                        {

                            <option value=@note.NoteId>@note.Title</option>

                        }
                    </InputSelect>
                    @if (noteId != null)
                    {
                        <center>
                            <button type="button" class="btn btn-primary btn-sm mt-2" @onclick="()=>NavigateToNote()">@localizer["GoToNote"]</button>
                        </center>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-md-3"></div>
                <div class="col">
                    <RadzenButton ButtonType="ButtonType.Submit" Text=@localizer["saveEvent"] />
                </div>
                <div class="col">
                    <RadzenButton data-ref="delete-button" Click=@(args => OnClickDelete(model)) Text=@localizer["deleteEvent"] ButtonStyle="ButtonStyle.Danger" />
                </div>
            </div>
        </RadzenTemplateForm>
    </Authorized>
    <NotAuthorized>
        <div class="my-container">
            <div class="my-sub-container p-2 ">
                <center>
                    <h3>Log in, to visit your calendar.</h3>
                </center>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public Event Event { get; set; }
    [Parameter]
    public bool IsAgreeToGetReminder { get; set; }
    [Parameter]
    public DateTime ReminderAt { get; set; }

    Event model = new Event();
    private List<Note>? allNotes = new();
    private Note note = new();
    private string noteId;
    private string selectedNote;

    protected override async Task OnInitializedAsync()
    {
        model = Event;
        ApplicationUser loggedUser = await userRepository.GetUserByEmailAsync(httpContextAccessor.HttpContext.User.Identity.Name);
        allNotes = await noteService.GetAllUserNotesWithoutEventAsync(loggedUser.Id);

        if (model.Note != null)
        {
            note = await noteService.GetNoteByIdAsync(model.Note.NoteId);
            noteId = note.NoteId.ToString();
        }
        else noteId = null;

    }



    async Task OnSubmit(Event model)
    {
        if (model.ReminderAt < DateTime.Now || model.ReminderAt > model.StartAt)
        {
            model.ReminderAt = (await eventService.GetByIdAsync(model.EventId))?.ReminderAt;
            DialogService.Close(model);
            toastService.ShowError("You set wrong reminder", "Reminder reset!");
        }
        else
        {
            var attached = true;

            if (noteId != null && noteId != "" && noteId != (await eventService.GetByIdAsync(model.EventId))?.NoteId.ToString())
                attached = await eventService.AttachNoteToEventAsync(model.EventId, Guid.Parse(noteId));
            else if ((await eventService.GetByIdAsync(model.EventId))?.NoteId is not null && noteId == "")
            {
                attached = await eventService.DeleteNoteFromEventAsync(model.EventId);
            }
            var update = await eventService.UpdateAsync(model);

            DialogService.Close(model);
            if (update && attached)
                toastService.ShowSuccess("You have successfully edited an event");
            else
                toastService.ShowError("Something went wrong", "OOPS!");
        }

    }
    async Task OnClickDelete(Event model)
    {
        var returned = await eventService.GetByIdAsync(model.EventId);
        var deleteNote = true;
        if (noteId != null && noteId != "")
        {
            deleteNote = await eventService.DeleteNoteFromEventAsync(model.EventId);
        }
        var deleted = await eventService.DeleteAsync(model);

        DialogService.Close(model);
        if (deleted && deleteNote && returned != null)
            toastService.ShowSuccess("You have successfully deleted an event");
        else
            toastService.ShowError("Something went wrong", "OOPS!");

    }
    async Task OnClickDeleteReminder(Event model)
    {
        if (model.ReminderAt != null && model.ReminderAt > DateTime.Now)
        {
            await eventService.CancelEventReminderAsync(model);
            model.ReminderAt = null;
        }
        else
        {
            toastService.ShowInfo("You can't delete a reminder, which was already executed.");
        }

    }
    async Task OnClickEditReminder(Event model)
    {
        if (model.ReminderAt < DateTime.Now)
        {
            model.ReminderAt = null;
            DialogService.Close(model);
            toastService.ShowError("You can't set a reminder for the past", "Reminder reset!");
        }
        else if (model.ReminderAt != null && model.ReminderAt < model.StartAt && model.ReminderAt > DateTime.Now)
        {
            await eventService.EditEventReminderAsync(model);
            toastService.ShowSuccess("You successfully edited the reminder", "Reminder edited!");
        }
        else
        {
            model.ReminderAt = (await eventService.GetByIdAsync(model.EventId))?.ReminderAt;
            DialogService.Close(model);
            toastService.ShowError("You set wrong reminder", "Reminder reset!");
        }


    }
    void NavigateToNote()
    {
        navigationManager.NavigateTo("/editNote/" + noteId);
    }
} 