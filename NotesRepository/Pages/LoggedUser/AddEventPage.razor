@using NotesRepository.Data.Models
@using NotesRepository.Repositories
@using NotesRepository.Services
@using System.Collections.ObjectModel

@inject DialogService DialogService
@inject IToastService toastService;
@inject NoteService noteService;
@inject UserRepository userRepository;
@inject EventService eventService;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource> localizer



<RadzenTemplateForm TItem="Event" Data="@model" Submit="async () => await OnSubmit()">
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text=@localizer["Text"] />
        </div>
        <div class="col">
            <RadzenTextBox @bind-Value="@model.Content" Name="Content" />
            <RadzenRequiredValidator Text=@localizer["Title is required"] Component="Content" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text=@localizer["Start"] />
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@model.StartAt" Name="StartAt" ShowTime="true" />
            <RadzenRequiredValidator Text=@localizer["Start is required"] Component="StartAt" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text=@localizer["End"] />
        </div>
        <div class="col">
            <RadzenDatePicker Name="EndAt" @bind-Value="@model.EndAt" ShowTime="true" />
            <RadzenRequiredValidator Component="EndAt" Text=@localizer["End is required"] />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col">
            <div class="form-check my-2">
                <input class="form-check-input" type="checkbox" @bind-value="IsAgreeToGetReminder" @oninput="CheckboxChanged"
                       id="checkingReminder"> @*TO DO  sprawdzenie eventu i podpinanie remindera*@
                <label class="form-check-label" for="flexCheckDefault">
                    @localizer["Set reminder"] @IsAgreeToGetReminder
                </label>
                @if (@IsAgreeToGetReminder)
                {
                    <div class="col">
                        <RadzenDatePicker @bind-Value="@model.ReminderAt" Name="ReminderAt" ShowTime="true" />
                    </div>
                }
            </div>
        </div>
        <div class="col">
            <RadzenLabel Text=@localizer["Note Title"] />
            <InputSelect @bind-Value="@noteId">
                <option selected value=>---</option>
                @foreach (var note in allNotes)
                {
                    <option value=@note.NoteId>@note.Title</option>
                }
            </InputSelect>
            @*<RadzenTextBox Placeholder ="to do"  Name="Note Title" />*@
        </div>
    </div>
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col">
            <RadzenButton ButtonType="ButtonType.Submit" Text=@localizer["Save Event"] />
        </div>
    </div>
</RadzenTemplateForm>
@code {
    [Parameter]
    public DateTime StartAt { get; set; }

    [Parameter]
    public DateTime EndAt { get; set; }

    [Parameter]
    public bool IsAgreeToGetReminder { get; set; }

    Event model = new Event();
    private List<Note>? allNotes = new();
    private Note note = new();
    private string noteId;

    protected override async Task OnInitializedAsync()
    {
        ApplicationUser loggedUser = await userRepository.GetUserByEmailAsync(httpContextAccessor.HttpContext.User.Identity.Name);
        model.User = loggedUser;
        model.EventId = Guid.NewGuid();
        allNotes = await noteService.GetAllUserNotesWithoutEventAsync(loggedUser.Id);
    }

    protected override void OnParametersSet()
    {
        model.StartAt = StartAt;
        model.EndAt = EndAt;
    }

    async Task OnSubmit()
    {


        var added = await eventService.AddAsync(model);
        var returned = await eventService.GetByIdAsync(model.EventId);
        var attached = true;
        if (noteId != null && noteId != "")
            attached = await eventService.AttachNoteToEventAsync(model.EventId, Guid.Parse(noteId));


        DialogService.Close(model);
        if (added && attached && returned != null)
            toastService.ShowSuccess("You have successfully added an event");
        else
            toastService.ShowError("Something went wrong", "OOPS!");

    }
    async Task CheckboxChanged()
    {
        //TO DO ustawianie remindera i wysyłanie
    }

}
