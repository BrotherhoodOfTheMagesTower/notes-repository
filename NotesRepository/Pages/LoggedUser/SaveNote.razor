@using NotesRepository.Services;
@using NotesRepository.Data;
@using NotesRepository.Data.Models;
@using NotesRepository.Data.Constants
@using NotesRepository.Repositories;
@using System.Security.Claims;
@using System.ComponentModel.DataAnnotations;

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor;
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource> localizer;
@inject NavigationManager navigationManager;
@inject UserRepository _ur;
@inject DirectoryService _ds;
@inject NoteService _ns;
@inject IToastService toastService;

<!--TODO Wprowadź tytuł notatki, wybór ikony (emoji), wybór folderu-->
@if(directoriesList is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@inputFromUser" OnValidSubmit="saveNote">
        <DataAnnotationsValidator/>
        <div>
            <div>
                <row>@localizer["name"]</row>
                <row>
                    <InputText id="noteTitle" @bind-Value="@inputFromUser.Title"></InputText>
                    <ValidationMessage For="() => inputFromUser.Title"/>
                </row>
            </div>
            <div>
                <row>@localizer["directory"]</row>
                <row>
                    <InputSelect id="noteDirecotry" @bind-Value="@inputFromUser.Directory" class="my-input">
                        @foreach (var direcotry in directoriesList)
                        {
                            <option value="@direcotry.Name">@direcotry.Name</option>
                        }
                    </InputSelect>
                </row>
            </div>
            <div>
                <row>Emoji</row>
                <row>
                <InputSelect id="emoji"  @bind-Value="inputFromUser.Emoji">
                    @foreach(var e in Emoji.emoji)
                    {
                        <option value="@e">@e</option>
                    }
                </InputSelect>
                </row>
            </div>
        </div>
        <center>
            <button type="submit" class="btn btn-primary">@localizer["save"]</button>
        </center>
    </EditForm>
}

@code 
{
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public string content { get; set; }
    [Parameter] public string Title { get; set; } = "New note";
    [Parameter] public string IconName { get; set; } = Emoji.getRandomEmoji();
    [Parameter] public Note? noteFromDb { get; set; } = null;
    private Directory? selectedDirectory;
    private NoteValidation inputFromUser;
    private List<Directory>? directoriesList;

    protected override async Task OnInitializedAsync()
    {
        inputFromUser = noteFromDb == null ? new NoteValidation(Title, IconName, "Default") : new NoteValidation(noteFromDb.Title, noteFromDb.IconName, noteFromDb.Directory.Name);
        var currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        directoriesList = (await _ds.GetAllDirectoriesForParticularUserAsync(currentUserId)).ToList();
        directoriesList.Remove(directoriesList.Find(d => d.Name == "Bin"));
        directoriesList.Sort((x, y) => string.Compare(x.Name, y.Name));
    }

    private string? GetCurrentUserId()
    {
        string? currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        return currentUserId;
    }

    private async Task saveNote()
    {
        if (content.Length <= 0)
        {
            toastService.ShowError(localizer["EditNoteMessageEmptyNote"], "OOPS!");
        }
        else
        {
            try
            {
                await validateDirectory(inputFromUser.Directory);
                string? currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (currentUserId != null)
                {
                    var usr = await _ur.GetUserByIdAsync(currentUserId);
                    if (usr is not null && selectedDirectory is not null)
                    {
                        if(noteFromDb == null)
                        {
                            // Save new note
                            var note = new Note(null, inputFromUser.Title, content, inputFromUser.Emoji, usr, selectedDirectory);
                            var result = await _ns.AddNoteAsync(note);
                            if (result)
                                toastService.ShowSuccess(localizer["SaveNoteMessageSaved"], localizer["congrats"]);
                            submitForm(note);
                        }
                        else
                        {
                            // Update existing note
                            if (inputFromUser.Directory == noteFromDb.Directory.Name &&
                                inputFromUser.Title == noteFromDb.Title &&
                                inputFromUser.Emoji == noteFromDb.IconName)
                            {
                                noteFromDb.Content = content;
                                var result = await _ns.UpdateNoteAsync(noteFromDb);
                                if (result)
                                    toastService.ShowSuccess(localizer["SaveNoteMessageOverwritten"], localizer["congrats"]);
                                submitForm(noteFromDb);
                            }
                            else // Save existing note in another place (nie wiem czy potrzebne, narazie zostawię)
                            {
                                var note = new Note(null, inputFromUser.Title, content, inputFromUser.Emoji, usr, selectedDirectory);
                                var result = await _ns.AddNoteAsync(note);
                                if (result)
                                    toastService.ShowSuccess(localizer["SaveNoteMessageSaved"], localizer["congrats"]);
                                submitForm(note);
                            }
                        }

                    }
                }
            }
            catch(Exception e)
            {
                toastService.ShowError(e.Message, "OOPS!");
            }
        }
    }

    private void submitForm(Note note)
    {
        ModalInstance.CloseAsync(ModalResult.Ok(note.NoteId.ToString()));
    }

    private async Task validateDirectory(string name)
    {
        var userId = GetCurrentUserId()!;
        if (userId != null)
        {
            selectedDirectory = await _ds.GetDirectoryByNameAsync(name, userId);
            if (selectedDirectory == null)
                throw new Exception(localizer["SaveNoteMessageNoSuchFolder"]);
        }
    }
}