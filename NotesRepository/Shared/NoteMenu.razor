@using NotesRepository.Services;
@using NotesRepository.Data;
@using NotesRepository.Data.Models;
@using NotesRepository.Repositories;
@using System.Security.Claims;
@using System.ComponentModel.DataAnnotations;

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor;
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource> localizer;
@inject NavigationManager navigationManager;
@inject UserRepository _ur;
@inject DirectoryService _ds;
@inject NoteService _ns;
@inject IToastService toastService;

<EditForm Model="@inputFromUser" OnValidSubmit="saveNote">
    <DataAnnotationsValidator />
    <div class="options-menu">
        @if (NoteFromDB is not null && NoteFromDB.IsPinned)
        {
            <div class="my-nav-item px-3 py-2 my-nav-item-hover" @onclick="() => PinNote(NoteFromDB)">
                <span class="oi oi-pin" aria-hidden="true"></span> @localizer["unPinNote"]
            </div>
        }
        else
        {
            <div class="my-nav-item px-3  py-1 my-nav-item-hover" @onclick="() => PinNote(NoteFromDB)">
                <span class="oi oi-pin" aria-hidden="true"></span> @localizer["pinNote"]
            </div>
        }

        <div class="my-nav-item px-3 py-1 d-flex justify-content-between ">
            <div>
                <span class="oi oi-brush" aria-hidden="true"></span> @localizer["editName"]
            </div>
            @if (inputFromUser is not null)
            {
                <row>
                    <InputText id="noteTitle" @bind-Value="@inputFromUser.Title" class="my-input"></InputText>
                    <ValidationMessage For="() => inputFromUser.Title" />
                </row>
            }

        </div>
        <div class="my-nav-item px-3 py-1 d-flex justify-content-between ">
            <div>
                <span class="oi oi-brush" aria-hidden="true"></span> @localizer["changeFolder"]

            </div>
            @if (inputFromUser is not null)
            {
                @if (directoriesList is not null && NoteFromDB is not null)
                {
                    <row>
                        <InputSelect id="noteTitle" @bind-Value="@inputFromUser.Directory" class="my-input">
                            <option value="@NoteFromDB.Directory.Name">@NoteFromDB.Directory.Name</option>
                            @foreach (var d in directoriesList)
                            {
                        @if (d != NoteFromDB.Directory)
                                {
                            <option value="@d.Name">@d.Name</option>
                                }
                            }

                </InputSelect>

                <ValidationMessage For="() => inputFromUser.Directory" />
            </row>
                }

            }
        </div>
        <div class="my-nav-item px-3 py-1 d-flex justify-content-between">
            <div>
                <span class="oi fa-solid fa-face-grin-wide" aria-hidden="true"></span> @localizer["emoji"]
            </div>
            @if (inputFromUser is not null)
            {
                <row>
                    <InputSelect id="emoji" @bind-Value="@inputFromUser.Emoji" class="my-input">
                        @foreach (var e in emoji)
                        {
                        <option value="@e">@e</option>
                        }
                </InputSelect>
            </row>
            }
        </div>
        <div class="my-nav-item px-3 py-1 my-nav-item-hover" @onclick="() => DeleteNote(NoteFromDB)">
            <span class="oi oi-trash" aria-hidden="true"></span> @localizer["deleteNote"]
        </div>
    </div>
    <center>
        <button type="submit" class="btn btn-primary">@localizer["save"]</button>
    </center>
</EditForm>


@code
{
    [CascadingParameter] BlazoredModalInstance? ModalInstance { get; set; }
    [Parameter] public string Title { get; set; } = "New note";
    [Parameter] public string IconName { get; set; } = "📜";
    [Parameter] public Note? NoteFromDB { get; set; } = null;
    private Directory? selectedDirectory;
    private NoteValidation? inputFromUser;
    string? currentUserId;
    private List<Directory>? directoriesList;
    // TODO trzeba to przemyśleć
    private string[] emoji = {  "⌚️", "📱", "📲", "💻", "📞", "☎️",
                                "📟", "📠", "📺","📻","🎙","🎚",
                                "🎛", "🧭", "⏱","⏲","⏰","🕰",
                                "📜", "📃", "📄","📑","🧾", "📊",
                                "📈", "📉", "🗒","🗑","📇", "🗃",
                                "🗳", "🗄", "📋","📁", "📂","🗂",
                                "🗞", "📰", "📓","📔","📒", "📕",
                                "📗", "📘", "📙","📚", "📖","🔖",
                                "🧷", "🔗", "📎","🖇", "📐","📏",
                                "🧮", "📌", "📍","✂️", "🖊","🖋",
                                "✒️", "🖌 ","🖍","📝","✏️", "🔍",
                                "🔎", "🔏", "🔐","🔒","🔓"};

    protected override async Task OnInitializedAsync()
    {
        currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (NoteFromDB is not null)
        {
            inputFromUser = new NoteValidation(NoteFromDB.Title, NoteFromDB.IconName, NoteFromDB.Directory.Name);
        }
        if (currentUserId is not null)
        {
            directoriesList = (await _ds.GetAllDirectoriesForParticularUserAsync(currentUserId)).ToList();
            directoriesList.Sort((x, y) => string.Compare(x.Name, y.Name));
        }
    }
    private async Task saveNote()
    {
        try
        {
            if (inputFromUser is not null && currentUserId is not null)
            {
                await ValidateDirectory(inputFromUser.Directory, currentUserId);
                if (currentUserId != null)
                {
                    var usr = await _ur.GetUserByIdAsync(currentUserId);
                    if (usr is not null && selectedDirectory is not null && NoteFromDB is not null)
                    {
                        // Update existing note
                        NoteFromDB.Title = inputFromUser.Title;
                        NoteFromDB.IconName = inputFromUser.Emoji;
                        NoteFromDB.Directory = await _ds.GetDirectoryByNameAsync(inputFromUser.Directory, currentUserId);

                        var result = await _ns.UpdateNoteAsync(NoteFromDB);

                        if (result)
                            toastService.ShowSuccess("The note has been updated.", "Congrats!");
                        else
                        {
                            toastService.ShowError("An error occurred while saving note.", "OOPS!");
                        }
                        submitForm(NoteFromDB);
                    }
                }
            }
        }
        catch (Exception e)
        {
            toastService.ShowError(e.Message, "OOPS!");
        }
    }

    private void submitForm(Note note)
    {
        ModalInstance?.CloseAsync(ModalResult.Ok(note.NoteId.ToString()));
    }

    private async Task ValidateDirectory(string name, string currentUserId)
    {
        if (currentUserId is not null)
        {
            var userId = currentUserId;
            if (userId != null)
            {
                selectedDirectory = await _ds.GetDirectoryByNameAsync(name, userId);
                if (selectedDirectory == null)
                    throw new Exception("There is no such folder!");
            }
        }
    }

    public class NoteValidation
    {
        public NoteValidation(string title, string emoji, string directory)
        {
            Title = title;
            Directory = directory;
            Emoji = emoji;
        }

        [Required(ErrorMessage = "Required field!")]
        [StringLength(32, ErrorMessage = "Too long!")]
        [MinLength(2, ErrorMessage = "Too short!")]
        public string Title { get; set; }

        [Required(ErrorMessage = "Required field!")]
        public string Directory { get; set; }

        [Required(ErrorMessage = "Required field!")]
        public string Emoji { get; set; }
    }

    private void PinNote(Note? note)
    {
        if (note is not null)
        {
            note.IsPinned = !note.IsPinned;
        }
    }

    private async Task DeleteNote(Note? note)
    {
        if (note is not null)
        {
            var result = await _ns.DeleteNoteByIdAsync(note.NoteId);

            if (result)
            {
                toastService.ShowSuccess("Note has been deleted!", "Success!");
            }
            else
            {
                toastService.ShowSuccess("Error while deleting note", "Error!");
            }
            ModalInstance?.CloseAsync(ModalResult.Ok(note.NoteId.ToString()));
        }
    }
}