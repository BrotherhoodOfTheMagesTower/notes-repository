@using NotesRepository.Services;
@using NotesRepository.Data;
@using NotesRepository.Data.Models;
@using NotesRepository.Repositories;
@using System.Security.Claims;
@using System.ComponentModel.DataAnnotations;

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor;
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource> localizer;
@inject NavigationManager navigationManager;
@inject UserRepository _ur;
@inject DirectoryService _ds;
@inject IToastService toastService;

<EditForm Model="@inputFromUser" OnValidSubmit="SaveFolder">
    <DataAnnotationsValidator />
    <div class="options-menu">

        <div class="my-nav-item px-3 py-1 d-flex justify-content-between ">
            <div>
                <span class="oi oi-brush" aria-hidden="true"></span> @localizer["editName"]
            </div>
            @if (inputFromUser is not null)
            {
                <row class="px-2">
                    <InputText id="directoryTitle" @bind-Value="@inputFromUser.Title" class="my-input"></InputText>
                    <ValidationMessage For="() => inputFromUser.Title" />
                </row>
            }

        </div>
        <div class="my-nav-item px-3 py-1 d-flex justify-content-between ">
            <div>
                <span class="oi oi-brush" aria-hidden="true"></span> @localizer["changeFolder"]

            </div>
            @if (inputFromUser is not null)
            {
                @if (directoriesList is not null && DirectoryFromDB is not null)
                {
                    <row class="ps-2">
                        <InputSelect id="folderTitle" @bind-Value="@inputFromUser.Directory" class="my-input">
                            @if (DirectoryFromDB.ParentDir is not null)
                            {
                        <option checked value="@DirectoryFromDB.Name">@DirectoryFromDB.ParentDir.Name</option>
                        @foreach (var d in directoriesList)
                                {
                            @if (d == DirectoryFromDB || d == DirectoryFromDB.ParentDir)
                                    {
                                        continue;
                                    }
                            <option value="@d.Name">@d.Name</option>
                                }
                            }
                            else
                            {
                        <option checked value="@DirectoryFromDB.Name">---</option>

                            }


                </InputSelect>

                <ValidationMessage For="() => inputFromUser.Directory" />
            </row>
                }

            }
        </div>
        <div class="my-nav-item px-3 py-1 my-nav-item-hover" @onclick="() => DeleteFolder(DirectoryFromDB)">
            <span class="oi oi-trash" aria-hidden="true"></span> @localizer["deleteFolder"]
        </div>
    </div>
    <center>
        <button type="submit" class="btn btn-primary">@localizer["save"]</button>
    </center>
</EditForm>

@code
{
    [CascadingParameter] BlazoredModalInstance? ModalInstance { get; set; }
    [Parameter] public string Title { get; set; } = "New Folder";
    [Parameter] public Directory? DirectoryFromDB { get; set; } = null;
    private FolderValidation? inputFromUser;
    string? currentUserId;
    private List<Directory>? directoriesList;

    protected override async Task OnInitializedAsync()
    {
        currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (DirectoryFromDB is null || currentUserId is null)
            return;

        inputFromUser = new FolderValidation(DirectoryFromDB.Name, DirectoryFromDB.Name);

        var tempDirectories = (await _ds.GetAllNotDeletedDirectoriesForParticularUserAsync(currentUserId));

        if (tempDirectories is null)
            return;

        directoriesList = tempDirectories.ToList();
        directoriesList.Sort((x, y) => string.Compare(x.Name, y.Name));
    }

    private async Task ValidateDirectory(string name, string currentUserId)
    {
        if (currentUserId is not null)
        {
            var userId = currentUserId;
            if (userId != null)
            {
                var selectedDirectory = await _ds.GetDirectoryByNameAsync(name, userId);
                if (selectedDirectory == null)
                    throw new Exception(localizer["directoryDoesntExist"]);
            }
        }
    }

    private async Task ValidateEditingName(string name, string currentUserId)
    {
        if (currentUserId is not null)
        {
            var userId = currentUserId;
            if (userId != null)
            {
                var selectedDirectory = await _ds.GetDirectoryByNameAsync(name, userId);
                if (selectedDirectory != null && selectedDirectory.Name != name)
                    throw new Exception(localizer["folderExists"]);
            }
        }
    }

    private async Task SaveFolder()
    {
        try
        {
            if (inputFromUser is not null && currentUserId is not null)
            {
                var usr = await _ur.GetUserByIdAsync(currentUserId);
                if (usr is not null && DirectoryFromDB is not null)
                {

                    if (DirectoryFromDB.Name != inputFromUser.Directory)
                    {
                        await ValidateDirectory(inputFromUser.Directory, currentUserId);
                        Directory? tempDirectory = await _ds.GetDirectoryByNameAsync(inputFromUser.Directory, currentUserId);
                        if (tempDirectory is not null)
                        {
                            var result = await _ds.ChangeParentDirectoryForSubDirectoryAsync(DirectoryFromDB.DirectoryId, tempDirectory.DirectoryId);
                            if (result)
                                toastService.ShowSuccess(localizer["directoryUpdated"], localizer["congrats"]);
                            else
                                toastService.ShowError(localizer["errorWhileMoving"], "OOPS!");
                        }
                        else
                        {
                            toastService.ShowError(localizer["errorWhileMoving"], "OOPS!");
                        }
                    }

                    if (DirectoryFromDB.Name != inputFromUser.Title)
                    {
                        if (DirectoryFromDB.Name != "Default")
                        {

                            bool result = false;
                            await ValidateEditingName(inputFromUser.Title, currentUserId);
                            var folderExists = await _ds.CheckIfTheFolderTitleExistsForParticularUserAsync(inputFromUser.Title, currentUserId);
                            if (folderExists == false)
                            {
                                DirectoryFromDB.Name = inputFromUser.Title;
                                result = await _ds.UpdateAsync(DirectoryFromDB);
                            }

                            if (result)
                                toastService.ShowSuccess(localizer["directoryNameUpdated"], localizer["congrats"]);
                            else
                                toastService.ShowError(localizer["errorWhileRenaming"], "OOPS!");
                        }
                        else
                            toastService.ShowError(localizer["errorWhileRenaming"], "OOPS!");
                            
                    }


                    submitForm(DirectoryFromDB);

                }
            }
        }
        catch (Exception e)
        {
            toastService.ShowError(e.Message, "OOPS!");
        }
    }

    private void submitForm(Directory directory)
    {
        ModalInstance?.CloseAsync(ModalResult.Ok(directory.DirectoryId.ToString()));
    }

    private async Task DeleteFolder(Directory? directory)
    {
        if (directory is not null)
        {
            if (directory.Name is not "Default")
            {
                var result = await _ds.MoveDirectoryWithStructureOfSubdirectoriesAndNotesToBinAsync(directory.DirectoryId);

                if (result)
                {
                    toastService.ShowSuccess(localizer["directoryHasBeenDeleted"], localizer["congrats"]);
                }
                else
                {
                    toastService.ShowSuccess(localizer["errorDeletingDir"], localizer["error"]);
                }
                ModalInstance?.CloseAsync(ModalResult.Ok(directory.DirectoryId.ToString()));
            }
            else
                toastService.ShowError(localizer["folderCantBeDeleted"], localizer["error"]);
        }
    }
}