@using NotesRepository.Services;
@using NotesRepository.Data;
@using NotesRepository.Data.Models;
@using NotesRepository.Repositories;
@using System.Security.Claims;
@using System.ComponentModel.DataAnnotations;

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor;
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource> localizer;
@inject NavigationManager navigationManager;
@inject UserRepository _ur;
@inject DirectoryService _ds;
@inject IToastService toastService;

<EditForm Model="@inputFromUser" OnValidSubmit="SaveFolder">
    <DataAnnotationsValidator />
    <div class="options-menu">


        <div class="my-nav-item px-3 py-1 my-nav-item-hover" @onclick="() => DeleteFolder(DeletedDirectoryFromDB)">
            <span class="oi oi-trash" aria-hidden="true"></span> @localizer["deleteFolderPermanently"]
        </div>
    </div>
    <div class="my-nav-item px-3 py-1 d-flex justify-content-between ">
            <div>
                <span class="oi oi-brush" aria-hidden="true"></span> @localizer["restoreFolder"]

            </div>
            @if (inputFromUser is not null)
            {
                @if (directoriesList is not null && DeletedDirectoryFromDB is not null)
                {
                    <row class="ps-2">
                        <InputSelect id="noteTitle" @bind-Value="@inputFromUser.Directory" class="my-input">
                            @foreach (var d in directoriesList)
                            {
                            <option value="@d.Name">@d.Name</option>
                            }
                </InputSelect>

                <ValidationMessage For="() => inputFromUser.Directory" />
            </row>
                }

            }
        </div>
    <center>
        <button type="submit" class="btn btn-primary">@localizer["save"]</button>
    </center>
</EditForm>

@code
{
    [CascadingParameter] BlazoredModalInstance? ModalInstance { get; set; }
    [Parameter] public Directory? DeletedDirectoryFromDB { get; set; } = null;
    public Directory? SelectedDirectory { get; set; } = null;
    private DeletedFolderValidation? inputFromUser;
    string? currentUserId;
    private Directory? selectedDirectory;
    private List<Directory>? directoriesList;

    protected async override Task OnInitializedAsync()
    {
        currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (DeletedDirectoryFromDB is null || currentUserId is null)
            return;

        inputFromUser = new DeletedFolderValidation(DeletedDirectoryFromDB.Name);
        var tempDirectories = (await _ds.GetAllNotDeletedDirectoriesForParticularUserAsync(currentUserId));

        if (tempDirectories is null)
            return;

        directoriesList = tempDirectories.ToList();
        directoriesList.Sort((x, y) => string.Compare(x.Name, y.Name));
    }

    private async Task ValidateDirectory(string name, string currentUserId)
    {
        if (currentUserId is not null)
        {
            var userId = currentUserId;
            if (userId != null)
            {
                SelectedDirectory = await _ds.GetDirectoryByNameAsync(name, userId);
                if (SelectedDirectory != null)
                    throw new Exception("Directory already exists!");
            }
        }
    }

    private async Task SaveFolder()
    {
        try
        {
            if (inputFromUser is not null && currentUserId is not null)
            {
                if (currentUserId != null)
                {
                    var usr = await _ur.GetUserByIdAsync(currentUserId);
                    if (usr is not null && DeletedDirectoryFromDB is not null)
                    {
                        Directory? tempDirectory = await _ds.GetDirectoryByNameAsync(inputFromUser.Directory, currentUserId);
                        var result = await _ds.CascadeRestoreDirectoryWithStructureOfSubdirectoriesAndNotesFromBinToDirectoryAsync(DeletedDirectoryFromDB.DirectoryId, tempDirectory.DirectoryId);

                        if (result)
                            toastService.ShowSuccess("The directory has been restored.", "Congrats!");
                        else
                        {
                            toastService.ShowError("An error occurred while restoring directory.", "OOPS!");
                        }
                        submitForm(DeletedDirectoryFromDB);
                    }
                }
            }
        }
        catch (Exception e)
        {
            toastService.ShowError(e.Message, "OOPS!");
        }
    }

    private void submitForm(Directory directory)
    {
        ModalInstance?.CloseAsync(ModalResult.Ok(directory.DirectoryId.ToString()));
    }

    private async Task DeleteFolder(Directory? directory)
    {
        if(directory is not null)
        {
            var result = await _ds.CascadeRemoveDirectoryWithStructureOfSubdirectoriesAndNotesFromBinAsync(DeletedDirectoryFromDB.DirectoryId);
            if (result)
                toastService.ShowSuccess("The directory has been removed.", "Congrats!");
            else
            {
                toastService.ShowError("An error occurred while removing directory.", "OOPS!");
            }
        }
    }
}