@inject Data.ViewOptionService ViewOption
@using Microsoft.Extensions.Localization
@using System.Security.Claims
@using NotesRepository.Repositories
@using Blazored.Typeahead
@using Data.Models
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource> localizer
@inject UserRepository _ur;
@inject DirectoryRepository _dr;
@inject IModalService modal;


<nav class="flex-column navigation">
    <div class="top-row ps-3 navbar navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">NotesRepository</a>
        </div>
    </div>
    <br />

    <AuthorizeView>
        <!--TODO tutej trzeba dodać role, nie dodałem bo nie wiem jakie mamy Xd-->
        <Authorized>
            <BlazoredTypeahead SearchMethod="NotesSearch" @bind-Value="searchPhrase">
                <SelectedTemplate Context="searchContext">
                    @searchContext.Content
                </SelectedTemplate>
                <ResultTemplate Context="resultContext">
                    @resultContext.Content
                </ResultTemplate>
                <NotFoundTemplate Context="notFoundContext">
                    Sorry, there weren't any search results.
                </NotFoundTemplate>
            </BlazoredTypeahead>
            <br />
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/editNote/-1">
                    <span class="oi oi-copywriting" aria-hidden="true"></span> @localizer["newNote"]
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> @localizer["homePage"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="#">
                    <span class="oi oi-calendar" aria-hidden="true"></span> @localizer["calendar"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="dropdown-toggle nav-link" @onclick="() => ToggleSubmenu()">
                    <span class="oi oi-folder" aria-hidden="true"></span>@localizer["folders"]
                </NavLink>
            </div>
            @if (areAllFoldersToggled)
            {
                if (mainDirs is not null)
                {
                    foreach (var dir in mainDirs)
                    {
                        @if (dir.SubDirectories is not null)
                        {
                            <div class="nav-item my-nav-item">
                                <NavLink class="dropdown-toggle nav-link" @onclick="() => ToggleSubDirectory(dir.DirectoryId)">
                                    <span class="oi oi-folder" aria-hidden="true"></span><span class="p-1">@dir.Name</span>
                                    <span class="oi oi-arrow-right " @onclick="@(() => modal.Show<FolderMenu>(@dir.Name,options))"></span>
                                </NavLink>
                            </div>
                            if (isSubDirToggled)
                            {
                                if (subDirs is not null)
                                {
                                    foreach (var subDir in subDirs)
                                    {
                                        @if (subDir.SubDirectories is not null)
                                        {
                                            <div class="nav-item my-nav-item">
                                                <NavLink class="dropdown-toggle nav-link" @onclick="() => ToggleSubDirectory(subDir.DirectoryId)">
                                                    <span class="oi oi-folder" aria-hidden="true"></span><span class="p-1">@subDir.Name</span>
                                                    <span class="oi oi-arrow-right " @onclick="@(() => modal.Show<FolderMenu>(@subDir.Name,options))"></span>
                                                </NavLink>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="nav-item my-nav-item">
                                                <NavLink class="nav-link" href="#">
                                                    <span class="oi oi-folder" aria-hidden="true"></span><span class="p-1">@subDir.Name</span>
                                                    <span class="oi oi-arrow-right " @onclick="@(() => modal.Show<FolderMenu>(@subDir.Name,options))"></span>
                                                </NavLink>
                                            </div>
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            <div class="nav-item my-nav-item">
                                <NavLink class="nav-link" href="#">
                                    <span class="oi oi-folder" aria-hidden="true"></span><span class="p-1">@dir.Name</span>
                                    <span class="oi oi-arrow-right " @onclick="@(() => modal.Show<FolderMenu>(@dir.Name,options))"></span>
                                    </NavLink>
                            </div>
                        }
                    }
                }
            }
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/selectTemplate">
                    <span class="oi oi-text" aria-hidden="true"></span> @localizer["templates"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="dropdown-toggle nav-link">
                    <span class="oi oi-share" aria-hidden="true"></span> @localizer["shared"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="dropdown-toggle nav-link">
                    <span class="oi oi-trash" aria-hidden="true"></span> @localizer["trash"]
                </NavLink>
            </div>
        </Authorized>
    </AuthorizeView>
</nav>


@code {
    protected override async Task OnInitializedAsync()
    {
        mainDirs = await GetAllUserMainDirectories();
    }

    private bool collapseNavMenu = true;

    //private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private bool areAllFoldersToggled = false;
    private bool isSubDirToggled = false;
    private ICollection<Directory>? mainDirs;
    private ICollection<Directory>? subDirs;
    public Note searchPhrase;
    private bool searching = false;
    private List<Note> notes;
    private ModalOptions options = new ModalOptions()
        {

            Animation = ModalAnimation.FadeInOut(0.1),
        };


    protected override void OnInitialized()
    {
        notes = new List<Note>
            {
                new Note("Ala ma kota"),
                new Note("Ala Jakaś"),
                new Note("Taaa"),
            };
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task ToggleSubmenu()
    {
        areAllFoldersToggled = !areAllFoldersToggled;
        await GetAllUserMainDirectories();
    }

    private async Task ToggleSubDirectory(Guid directoryId)
    {
        isSubDirToggled = !isSubDirToggled;
        subDirs = await GetAllSubDirectoriesForSpecificDirectory(directoryId);
    }

    private async Task<IEnumerable<Note>> NotesSearch(string searchText)
    {
        return notes;
    }

    private async Task<ICollection<Directory>?> GetAllUserMainDirectories()
    {
        string? currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (currentUserId is not null)
        {
            var allDirs = await _dr.GetAllDirectoriesForParticularUserAsync(currentUserId);
            return allDirs.Where(x => x.ParentDir == null && x.Name != "Bin").ToList();
        }
        return null;
    }

    private async Task<ICollection<Directory>?> GetAllSubDirectoriesForSpecificDirectory(Guid directoryId)
        => await _dr.GetAllSubDirectoriesOfParticularDirectory(directoryId);

    private void SearchPhrase()
    {
        // Wywołanie funkcji szukającej
        if (searchPhrase == null)
        {
            searching = false;
        }
        else
        {
            searching = true;
        }
    }
}
