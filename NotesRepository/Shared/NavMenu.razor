@inject Data.ViewOptionService ViewOption
@using Microsoft.Extensions.Localization
@using System.Security.Claims
@using NotesRepository.Pages.LoggedUser
@using NotesRepository.Repositories
@using Blazored.Typeahead
@using Data.Models
@using NotesRepository.Services
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource> localizer
@inject UserRepository _ur;
@inject IModalService modal;
@inject DirectoryService _ds;
@inject NoteService _ns;
@inject Data.Flags flags;
@inject NavigationManager NavigationManager;

<nav class="flex-column navigation" id="my-nav">
    <div class="top-row ps-3 navbar navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">NotesRepository</a>
        </div>
    </div>
    <br />

    <AuthorizeView>
        <Authorized>
            <BlazoredTypeahead SearchMethod="NotesSearch" @bind-Value="searchPhrase">
                <SelectedTemplate Context="searchContext">
                    @searchContext.Content
                </SelectedTemplate>
                <ResultTemplate Context="resultContext">
                    @resultContext.Content
                </ResultTemplate>
                <NotFoundTemplate Context="notFoundContext">
                    Sorry, there weren't any search results.
                </NotFoundTemplate>
            </BlazoredTypeahead>
            <br />
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/editNote/newNote">
                    <span class="oi oi-copywriting" aria-hidden="true"></span> @localizer["newNote"]
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> @localizer["homePage"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/calendar">
                    <span class="oi oi-calendar" aria-hidden="true"></span> @localizer["calendar"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="dropdown-toggle nav-link" @onclick="() => ToggleSubmenu()">
                    <span class="oi oi-folder" aria-hidden="true"></span>@localizer["folders"]
                </NavLink>
            </div>

            @if (areAllFoldersToggled)
            {
                if (mainDirs is not null)
                {
                    @ToggleMainFolders(null)
                    ;
                }
            }
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/selectTemplate">
                    <span class="oi oi-text" aria-hidden="true"></span> @localizer["templates"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="dropdown-toggle nav-link" @onclick="()=> NavigateToShared()">
                    <span class="oi oi-share" aria-hidden="true"></span> @localizer["shared"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="dropdown-toggle nav-link" @onclick="()=> ToggleTrash()">
                    <span class="oi oi-trash" aria-hidden="true"></span> @localizer["trash"]
                </NavLink>
                @if (areTrashToggled)
                {
                    @ToggleFoldersInTrash(bin)
                    ;
                }
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="nav-item px-3">
                <NavLink class="dropdown-toggle nav-link" @onclick="()=> NavigateToFeatures()">
                    <span class="oi oi-thumb-up" aria-hidden="true"></span> @localizer["features"]
                </NavLink>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</nav>

@code {
    private bool areAllFoldersToggled = false;
    private ICollection<Directory>? mainDirs;
    private bool areTrashToggled = false;
    private ICollection<Directory>? binDirs;
    public Note searchPhrase;
    private bool searching = false;
    private List<Note> notes;
    private int parentDirsCount = 1;
    private int parentDirsCountForBin = 0;
    private int parentDirsCountForNotes = 0;
    private Directory? bin;
    private ModalOptions options = new ModalOptions()
        {

            Animation = ModalAnimation.FadeInOut(0.1),
        };
    private ModalParameters noteParameters = new ModalParameters();
    private ModalParameters folderParameters = new ModalParameters();
    private ModalParameters addingFolderParameters = new ModalParameters();

    protected override async Task OnInitializedAsync()
    {
        flags.setNavMenuLoadingStatus(true);
        Thread threadForInit = new Thread(async () => await init());
        threadForInit.Start();
    }

    private async Task init()
    {
        flags.setNavMenuLoadingStatus(true);
        string? currentUserId = GetCurrentUserId();
        if (currentUserId is not null)
        {
            mainDirs = await _ds.GetAllDirectoriesWithoutParentDirectoryForParticularUserAsync(currentUserId);
            bin = await _ds.GetBinForParticularUserAsync(currentUserId);
            //binDirs = await _ds.GetAllSubDirectoriesOfParticularDirectoryAsync(bin.DirectoryId);

        }
        flags.setNavMenuLoadingStatus(false);
    }

    protected override void OnInitialized()
    {
        notes = new List<Note>
            {
                new Note("Ala ma kota"),
                new Note("Ala Jakaś"),
                new Note("Taaa"),
            };
    }

    private void ToggleSubmenu()
    {
        areAllFoldersToggled = !areAllFoldersToggled;
    }

    private void ToggleTrash()
    {
        areTrashToggled = !areTrashToggled;
    }

    private void ToggleSubDirectory(Directory directory)
    {
        directory.IsToggled = !directory.IsToggled;
    }

    private async Task<IEnumerable<Note>> NotesSearch(string searchText)
    {
        return notes;
    }

    private string? GetCurrentUserId()
    {
        string? currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        return currentUserId;
    }

    private void SearchPhrase()
    {
        // Wywołanie funkcji szukającej
        if (searchPhrase == null)
        {
            searching = false;
        }
        else
        {
            searching = true;
        }
    }

    private ICollection<Directory>? allCurrentSubdirectiories;

    private RenderFragment ToggleFolders(Directory directory) => __builder =>
    {
        if (directory == null)
        {
            allCurrentSubdirectiories = mainDirs;
        }
        else
        {
            allCurrentSubdirectiories = _ds.GetAllSubDirectoriesOfParticularDirectorySync(directory.DirectoryId);
            parentDirsCount = CountParentDir(directory);
        }

        @if (allCurrentSubdirectiories is not null && allCurrentSubdirectiories.Count() > 0)
        {
            string margin = (parentDirsCount * 20).ToString() + "px";
            <div style="margin-left:20px">
                @foreach (var dir in allCurrentSubdirectiories)
                {
                    var notesFromCurrentSubirectory = _ns.GetAllNotesForParticularDirectory(dir.DirectoryId);
                    <div class="d-flex align-items-baseline justify-content-between nav-item my-nav-item dropdown-toggle nav-link my-custom-nav-item">
                        <div class="folder-child " @onclick="@(() => ToggleSubDirectory(dir))">
                            <i class="oi oi-folder" aria-hidden="true"></i>
                            @PrintName(dir.Name)
                            @if (dir.SubDirectories != null && dir.SubDirectories.Count() > 0 || notesFromCurrentSubirectory != null && notesFromCurrentSubirectory.Count() > 0)
                            {
                                if (!dir.IsToggled)
                                {
                                    <i class="fa-solid fa-chevron-down"></i>

                                }
                                else
                                {
                                    <i class="fa-solid fa-chevron-up"></i>
                                }

                            }
                        </div>
                        <div class="my-options d-flex">
                            <div class="my-options-child">
                                <i class="fa-solid fa-plus " @onclick="()=> HandleAddingFolderPopup(dir)"></i>
                            </div>
                            <div class="my-options-child">
                                <i class="fa-solid fa-ellipsis " @onclick="()=> HandleFolderPopup(dir)"></i>
                            </div>
                        </div>


                    </div>

                    @if (dir.IsToggled)
                    {
                        @ToggleFolders(dir)
                        ;
                    }
                }
            </div>
        }

        var notes = _ns.GetAllNotesForParticularDirectory(directory!.DirectoryId);
        if (notes is not null && notes.Count() > 0)
        {
            parentDirsCountForNotes = CountParentDirForNote(notes.First());
            string margin = (parentDirsCountForNotes * 20).ToString() + "px";
            <div style="margin-left:20px">
                @foreach (var note in notes)
                {
                    <div class="d-flex align-items-baseline justify-content-between nav-item my-nav-item dropdown-toggle nav-link my-custom-nav-item">
                        <div class="folder-child" @onclick="() => GoToNote(note.NoteId.ToString())">
                            <i>@note.IconName</i>
                            @PrintName(note.Title)
                        </div>
                        <div class="my-options">
                            <div class="my-options-child">
                                <i class="fa-solid fa-ellipsis " @onclick="()=> HandleNotesPopup(note)"></i>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

    };

    private RenderFragment ToggleMainFolders(Directory? directory) => __builder =>
    {
        ICollection<Directory>? allCurrentSubdirectiories;
        allCurrentSubdirectiories = mainDirs;


        @if (allCurrentSubdirectiories is not null)
        {
            foreach (var dir in allCurrentSubdirectiories)
            {
                <div class="nav-item my-nav-item">
                    <NavLink class="dropdown-toggle nav-link justify-content-between" @onclick="@(() => ToggleSubDirectory(dir))">
                        <div class="my-inside-nav-link">
                            <i class="oi oi-folder" aria-hidden="true"></i>
                            @PrintName(dir.Name)
                            @if (dir.SubDirectories != null && dir.SubDirectories.Count() > 0)
                            {
                                if (!dir.IsToggled)
                                {
                                    <i class="fa-solid fa-chevron-down"></i>

                                }
                                else
                                {
                                    <i class="fa-solid fa-chevron-up"></i>
                                }
                            }
                        </div>
                        <div class="my-options d-flex">
                            <div class="my-options-child">
                                <i class="fa-solid fa-plus " @onclick="()=> HandleAddingFolderPopup(dir)"></i>
                            </div>
                            <div class="my-options-child">
                                <i class="fa-solid fa-ellipsis " @onclick="()=> HandleFolderPopup(dir)"></i>
                            </div>
                        </div>
                    </NavLink>
                </div>

                @if (dir.IsToggled)
                {
                    @ToggleFolders(dir)
                    ;
                }
            }
        }

    };
    private RenderFragment ToggleFoldersInTrash(Directory? directory) => __builder =>
       {
           ICollection<Directory>? allCurrentSubdirectiories;
           allCurrentSubdirectiories = _ds.GetAllSubDirectoriesOfParticularDirectorySync(directory.DirectoryId); ;
           parentDirsCountForBin = CountParentDir(directory);

           @if (allCurrentSubdirectiories is not null)
           {
               foreach (var dir in allCurrentSubdirectiories)
               {
                   <div class="nav-item my-nav-item">
                       <NavLink class="dropdown-toggle nav-link justify-content-between" @onclick="@(() => ToggleSubDirectory(dir))">
                           <div class="my-inside-nav-link">
                               <i class="oi oi-folder" aria-hidden="true"></i>
                               @PrintName(dir.Name)
                               @if (dir.SubDirectories != null && dir.SubDirectories.Count() > 0)
                               {
                                   if (!dir.IsToggled)
                                   {
                                       <i class="fa-solid fa-chevron-down"></i>

                                   }
                                   else
                                   {
                                       <i class="fa-solid fa-chevron-up"></i>
                                   }
                               }
                           </div>
                           <i class="fa-solid fa-ellipsis " @onclick="()=> HandleFolderPopup(dir)"></i>
                       </NavLink>
                   </div>

                   @if (dir.IsToggled)
                   {
                       @ToggleFolders(dir)
                       ;
                   }
               }
           }

       };

    private RenderFragment PrintName(string name) => __builder =>
    {
        @if (name.Count() > 10)
        {
            name = name.Remove(9);
            name += "...";
            <span class="p-1">@name</span>
        }
        else
        {
            <span class="p-1">@name</span>
        }
    };

    private void GoToNote(string Id)
    {
        NavigationManager.NavigateTo($"/editNote/{Id}");
    }

    private void NavigateToShared()
    {
        NavigationManager.NavigateTo("/sharedNotes");
    }

    private void NavigateToFeatures()
    {
        NavigationManager.NavigateTo("/features");
    }

    private void HandleNotesPopup(Note note)
    {
        noteParameters = new ModalParameters();
        noteParameters.Add("NoteFromDB", note);
        modal.Show<NoteMenu>
            (note.Title, noteParameters, options);
    }

    private void HandleFolderPopup(Directory directory)
    {
        folderParameters = new ModalParameters();
        folderParameters.Add("DirectoryFromDB", directory);
        modal.Show<FolderMenu>
            (directory.Name, folderParameters, options);
    }

    private void HandleAddingFolderPopup(Directory directory)
    {
        addingFolderParameters = new ModalParameters();
        addingFolderParameters.Add("DirectoryFromDB", directory);
        modal.Show<AddFolderMenu>
            (directory.Name, addingFolderParameters, options);
    }

    private int CountParentDir(Directory directory)
    {
        if (directory == null || directory.ParentDir is null)
            return 0;
        return 1 + CountParentDir(directory.ParentDir);
    }

    private int CountParentDirForNote(Note note)
    {
        if (note == null || note.Directory == null || note.Directory.ParentDir == null)
            return 0;
        return 1 + CountParentDir(note.Directory.ParentDir);
    }
}
