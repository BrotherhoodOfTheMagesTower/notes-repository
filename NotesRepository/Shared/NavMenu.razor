@inject Data.ViewOptionService ViewOption
@using Microsoft.Extensions.Localization
@using System.Security.Claims
@using NotesRepository.Pages.LoggedUser
@using NotesRepository.Repositories
@using Blazored.Typeahead
@using Data.Models
@using NotesRepository.Services
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource> localizer
@inject UserRepository _ur;
@inject IModalService modal;
@inject DirectoryService _ds;
@inject NoteService _ns;
@inject Data.Flags flags;
@inject NavigationManager NavigationManager;

<nav class="flex-column navigation">
    <div class="top-row ps-3 navbar navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">NotesRepository</a>
        </div>
    </div>
    <br />

    <AuthorizeView>
        <Authorized>
            <BlazoredTypeahead SearchMethod="NotesSearch" @bind-Value="searchPhrase">
                <SelectedTemplate Context="searchContext">
                    @searchContext.Content
                </SelectedTemplate>
                <ResultTemplate Context="resultContext">
                    @resultContext.Content
                </ResultTemplate>
                <NotFoundTemplate Context="notFoundContext">
                    Sorry, there weren't any search results.
                </NotFoundTemplate>
            </BlazoredTypeahead>
            <br />
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/editNote/newNote">
                    <span class="oi oi-copywriting" aria-hidden="true"></span> @localizer["newNote"]
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> @localizer["homePage"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/calendar">
                    <span class="oi oi-calendar" aria-hidden="true"></span> @localizer["calendar"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="dropdown-toggle nav-link" @onclick="() => ToggleSubmenu()">
                    <span class="oi oi-folder" aria-hidden="true"></span>@localizer["folders"]
                </NavLink>
            </div>

            @if (areAllFoldersToggled)
            {
                @if (mainDirs is not null)
                {
                    @ToggleMainFolders(null)
                    ;
                }
            }
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/selectTemplate">
                    <span class="oi oi-text" aria-hidden="true"></span> @localizer["templates"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="dropdown-toggle nav-link" @onclick="()=> NavigateToShareed()">
                    <span class="oi oi-share" aria-hidden="true"></span> @localizer["shared"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="dropdown-toggle nav-link">
                    <span class="oi oi-trash" aria-hidden="true"></span> @localizer["trash"]
                </NavLink>
            </div>
        </Authorized>
    </AuthorizeView>
</nav>


@code {
    private bool areAllFoldersToggled = false;
    private ICollection<Directory>? mainDirs;
    public Note searchPhrase;
    private bool searching = false;
    private List<Note> notes;
    private ModalOptions options = new ModalOptions()
        {

            Animation = ModalAnimation.FadeInOut(0.1),
        };
    ModalParameters noteParameters = new ModalParameters();

    protected override async Task OnInitializedAsync()
    {
        flags.setNavMenuLoadingStatus(true);
        Thread threadForInit = new Thread(async () => await init());
        threadForInit.Start();
    }

    private async Task init()
    {
        flags.setNavMenuLoadingStatus(true);
        mainDirs = await _ds.GetAllDirectoriesWithoutParentDirectoryForParticularUserAsync(GetCurrentUserId()!);
        flags.setNavMenuLoadingStatus(false);
    }

    protected override void OnInitialized()
    {
        notes = new List<Note>
            {
                new Note("Ala ma kota"),
                new Note("Ala Jakaś"),
                new Note("Taaa"),
            };
    }

    private void ToggleSubmenu()
    {
        areAllFoldersToggled = !areAllFoldersToggled;
    }

    private void ToggleSubDirectory(Directory directory)
    {
        directory.IsToggled = !directory.IsToggled;
    }

    private async Task<IEnumerable<Note>> NotesSearch(string searchText)
    {
        return notes;
    }

    private string? GetCurrentUserId()
    {
        string? currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        return currentUserId;
    }

    //private ICollection<Directory>? GetAllSubDirectoriesForSpecificDirectory(Guid directoryId)
    //=> _ds.GetAllSubDirectoriesOfParticularDirectorySync(directoryId);

    private void SearchPhrase()
    {
        // Wywołanie funkcji szukającej
        if (searchPhrase == null)
        {
            searching = false;
        }
        else
        {
            searching = true;
        }
    }

    private RenderFragment ToggleFolders(Directory directory) => __builder =>
    {
        ICollection<Directory>? allCurrentSubdirectiories;
        if (directory == null)
        {
            allCurrentSubdirectiories = mainDirs;
        }
        else
        {
            allCurrentSubdirectiories = _ds.GetAllSubDirectoriesOfParticularDirectorySync(directory.DirectoryId);
        }

        @if (allCurrentSubdirectiories is not null)
        {
            foreach (var dir in allCurrentSubdirectiories)
            {
                var notesFromCurrentSubirectory = _ns.GetAllNotesForParticularDirectory(dir.DirectoryId);
                <div class="d-flex align-items-baseline justify-content-between nav-item my-nav-item dropdown-toggle nav-link my-custom-nav-item">
                    <div class="folder-child " @onclick="@(() => ToggleSubDirectory(dir))">
                        <i class="oi oi-folder" aria-hidden="true"></i>
                        @PrintName(dir.Name)
                        @if (dir.SubDirectories != null && dir.SubDirectories.Count() > 0 || notesFromCurrentSubirectory != null && notesFromCurrentSubirectory.Count() > 0)
                        {
                            if (!dir.IsToggled)
                            {
                                <i class="fa-solid fa-chevron-down"></i>

                            }
                            else
                            {
                                <i class="fa-solid fa-chevron-up"></i>
                            }
                        }
                    </div>
                    <div class="my-options">
                        <i class="fa-solid fa-ellipsis " @onclick="@(() => modal.Show<FolderMenu>(@dir.Name,options))"></i>
                    </div>
                </div>

                @if (dir.IsToggled)
                {
                    @ToggleFolders(dir)
                    ;
                }
            }
        }

        var notes = _ns.GetAllNotesForParticularDirectory(directory.DirectoryId);
        if (notes is not null)
        {
            foreach (var note in notes)
            {


                <div class="d-flex align-items-baseline justify-content-between nav-item my-nav-item dropdown-toggle nav-link my-custom-nav-item">
                    <div class="folder-child" @onclick="() => GoToNote(note.NoteId.ToString())">
                        <i class="oi oi-file" aria-hidden="true"></i>
                        @PrintName(note.Title)
                    </div>
                    <div class="my-options">
                        <i class="fa-solid fa-ellipsis " @onclick="()=> HandleNotesPopup(note)"></i>
                    </div>
                </div>
            }
        }

    };

    private RenderFragment ToggleMainFolders(Directory? directory) => __builder =>
    {
        ICollection<Directory>? allCurrentSubdirectiories;
        if (directory == null)
        {
            allCurrentSubdirectiories = mainDirs;
        }
        else
        {
            allCurrentSubdirectiories = _ds.GetAllSubDirectoriesOfParticularDirectorySync(directory.DirectoryId);
        }

        @if (allCurrentSubdirectiories is not null)

        {
            foreach (var dir in allCurrentSubdirectiories)
            {
                <div class="nav-item my-nav-item">
                    <NavLink class="dropdown-toggle nav-link justify-content-between" @onclick="@(() => ToggleSubDirectory(dir))">
                        <div class="my-inside-nav-link">
                            <i class="oi oi-folder" aria-hidden="true"></i>
                            @PrintName(dir.Name)
                            @if (dir.SubDirectories != null && dir.SubDirectories.Count() > 0)
                            {
                                if (!dir.IsToggled)
                                {
                                    <i class="fa-solid fa-chevron-down"></i>

                                }
                                else
                                {
                                    <i class="fa-solid fa-chevron-up"></i>
                                }
                            }
                        </div>
                        <i class="fa-solid fa-ellipsis " @onclick="@(() => modal.Show<FolderMenu>(@dir.Name,options))"></i>
                    </NavLink>
                </div>

                @if (dir.IsToggled)
                {
                    @ToggleFolders(dir)
                    ;
                }
            }
        }

    };

    private RenderFragment PrintName(string name) => __builder =>
    {
        @if (name.Count() > 10)
        {
            name = name.Remove(9);
            name += "...";
            <span class="p-1">@name</span>
        }
        else
        {
            <span class="p-1">@name</span>
        }
    };

    //toDo implement this fuction
    private void GoToNote(string Id)
    {
        NavigationManager.NavigateTo($"/editNote/{Id}");
    }

    private void NavigateToShareed()
    {
        NavigationManager.NavigateTo($"/sharedNotes");
    }

    private void HandleNotesPopup(Note note)
    {
        noteParameters = new ModalParameters();
        noteParameters.Add("noteFromDb", note);
        modal.Show<NoteMenu>(note.Title, noteParameters, options);
    }

}
