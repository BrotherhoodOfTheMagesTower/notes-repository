@inject Data.ViewOptionService ViewOption
@using System.Security.Claims
@using NotesRepository.Repositories
@using Blazored.Typeahead
@using Data.Models
@using Repositories
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@inject UserRepository _ur;
@inject DirectoryRepository _dr;

<nav class="flex-column navigation">
    <div class="top-row ps-3 navbar navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">NotesRepository</a>
        </div>
    </div>
    <br />
    <BlazoredTypeahead SearchMethod="NotesSearch" @bind-Value="searchPhrase">
            <SelectedTemplate>
                @context.Content
            </SelectedTemplate>
            <ResultTemplate>
                 @context.Content
            </ResultTemplate>
            <NotFoundTemplate>
                Sorry, there weren't any search results.
            </NotFoundTemplate>
        </BlazoredTypeahead>

    <AuthorizeView>
        <!--TODO tutej trzeba dodać role, nie dodałem bo nie wiem jakie mamy Xd-->
        <Authorized>
<br />
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/editNote">
                    <span class="oi oi-copywriting"></span>New Note
                </NavLink>
            </div>
        
    <div class="nav-item px-3">
        <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
            <span class="oi oi-home" aria-hidden="true"></span> Home
        </NavLink>
    </div>
    <div class="nav-item px-3">
        <NavLink class="nav-link" href="#">
            <span class="oi oi-calendar" aria-hidden="true"></span> Calendar
        </NavLink>
    </div>
    <div class="nav-item px-3">
        <NavLink class="dropdown-toggle nav-link">
            <span class="oi oi-folder" aria-hidden="true" @onclick="() => TogleSubmenu()"></span>Folders 
           <FolderMenu/>
        </NavLink>
        
    </div>
    @if (allFolders)
    {
        if (dirs is not null)
        {
            foreach (var dir in dirs)
            {
                <div class="nav-item my-nav-item">
                    <NavLink class="nav-link" href="#">
                        <span class="oi oi-folder" aria-hidden="true"></span> @dir.Name
                        <FolderMenu/>
                    </NavLink>
                </div>
            }
        }
    }
    <div class="nav-item px-3">
        <NavLink class="nav-link" href="#">
            <span class="oi oi-text" aria-hidden="true"></span> Templates
        </NavLink>
    </div>
    <div class="nav-item px-3">
        <NavLink class="dropdown-toggle nav-link">
            <span class="oi oi-share" aria-hidden="true"></span> Shared
        </NavLink>
    </div>
    <div class="nav-item px-3">
        <NavLink class="dropdown-toggle nav-link">
            <span class="oi oi-trash" aria-hidden="true"></span> Trash
        </NavLink>
    </div>
    </Authorized>
    </AuthorizeView>
</nav>


@code {
    protected override async Task OnInitializedAsync()
    {
        dirs = await GetAllUserDirectories();
    }

    private bool collapseNavMenu = true;

    //private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private bool allFolders = false;
    private ICollection<Data.Models.Directory>? dirs;
    public Note searchPhrase;
    private bool searching=false;
    List<Note> notes;

    protected override void OnInitialized()
    {
            notes = new List<Note>
            {
                new Note("Ala ma kota"),
                new Note("Ala Jakaś"),
                new Note("Taaa"),
            };
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task TogleSubmenu()
    {
        allFolders = !allFolders;
        await GetAllUserDirectories();
    }

    private async Task<IEnumerable<Note>> NotesSearch(string searchText)
    {
        return notes;
    }

    private async Task<ICollection<Data.Models.Directory>?> GetAllUserDirectories()
    {   
        string? currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (currentUserId is not null)
        {
            return await _dr.GetAllDirectoriesForParticularUserAsync(currentUserId);
        }
        return null;
    }

    private void SearchPhrase()
    {
        // Wywołanie funkcji szukającej
        if (searchPhrase == null)
        {
            searching = false;
        }
        else
        {
            searching = true;
        }
    }
}
