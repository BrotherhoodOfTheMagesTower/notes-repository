@inject Data.ViewOptionService ViewOption
@using Microsoft.Extensions.Localization
@using System.Security.Claims
@using NotesRepository.Pages.LoggedUser
@using NotesRepository.Repositories
@using Blazored.Typeahead
@using Data.Models
@using NotesRepository.Services
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource> localizer
@inject UserRepository _ur;
@inject IModalService modal;
@inject DirectoryService _ds;
@inject NoteService _ns;
@inject Data.Flags flags;
@inject NavigationManager NavigationManager;
@inject IToastService toastService;

<nav class="flex-column navigation" id="my-nav">
    <div class="top-row ps-3 navbar navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">@localizer["notesRepository"]</a>
        </div>
    </div>
    <br />

    <AuthorizeView>
        <Authorized>
            <div class="my-search-wrapper">
                <BlazoredTypeahead SearchMethod="NotesSearch"
                                   @bind-Value="searchPhrase"
                                   placeholder=" @localizer["searchByContentOrTitle"]">
                    <SelectedTemplate Context="searchContext">
                        @searchContext?.Title
                    </SelectedTemplate>
                    <ResultTemplate Context="resultContext">
                        @resultContext.Title
                    </ResultTemplate>
                    <NotFoundTemplate Context="notFoundContext">
                        @localizer["noSearchResults"]
                    </NotFoundTemplate>
                </BlazoredTypeahead>
            </div>
            @if (searchPhrase is not null)
            {
                GoToNote(searchPhrase.NoteId.ToString());
                searchPhrase = null;
            }
            <br />
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/editNote/newNote" data-ref="new-note-btn">
                    <span class="oi oi-copywriting" aria-hidden="true"></span> @localizer["newNote"]
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/" data-ref="home-btn" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> @localizer["homePage"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/calendar" data-ref="calendar-btn">
                    <span class="oi oi-calendar" aria-hidden="true"></span> @localizer["calendar"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="dropdown-toggle nav-link" data-ref="main-dir-btn" @onclick="() => ToggleSubmenu()">
                    <span class="oi oi-folder" aria-hidden="true"></span>@localizer["folders"]
                </NavLink>
            </div>

            @if (areAllFoldersToggled)
            {
                if (mainDirs is not null)
                {
                    @ToggleFolders(null)
                    ;
                }
            }
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/selectTemplate" data-ref="templates-btn">
                    <span class="oi oi-text" aria-hidden="true"></span> @localizer["templates"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="dropdown-toggle nav-link" data-ref="shared-btn" @onclick="()=> NavigateToShared()">
                    <span class="oi oi-share" aria-hidden="true"></span> @localizer["shared"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="dropdown-toggle nav-link" data-ref="bin-btn" @onclick="()=> ToggleTrash()">
                    <span class="oi oi-trash" aria-hidden="true"></span> @localizer["trash"]
                </NavLink>
                @if (areTrashToggled)
                {
                    @ToggleFoldersInTrash(bin)
                    ;
                }
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="nav-item px-3">
                <NavLink class="dropdown-toggle nav-link" @onclick="()=> NavigateToFeatures()">
                    <span class="oi oi-thumb-up" aria-hidden="true"></span> @localizer["features"]
                </NavLink>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</nav>

@code {
    private bool areAllFoldersToggled = false;
    private ICollection<Directory>? mainDirs;
    private bool areTrashToggled = false;
    private ICollection<Directory>? binDirs;
    public Note? searchPhrase;
    private bool searching = false;
    private List<Note>? notes;
    private int parentDirsCount = 1;
    private int parentDirsCountForBin = 0;
    private int parentDirsCountForNotes = 0;
    string? currentUserId;
    private Directory? bin;
    private ModalOptions options = new ModalOptions()
        {

            Animation = ModalAnimation.FadeInOut(0.1),
        };
    private ModalParameters noteParameters = new ModalParameters();
    private ModalParameters folderParameters = new ModalParameters();
    private ModalParameters addingFolderParameters = new ModalParameters();

    protected override async Task OnInitializedAsync()
    {
        flags.setNavMenuLoadingStatus(true);
        Thread threadForInit = new Thread(async () => await init());
        threadForInit.Start();
    }

    private async Task init()
    {
        flags.setNavMenuLoadingStatus(true);
        currentUserId = GetCurrentUserId();
        if (currentUserId is not null)
        {
            mainDirs = await _ds.GetAllDirectoriesWithoutParentDirectoryForParticularUserAsync(currentUserId);
            bin = await _ds.GetBinForParticularUserAsync(currentUserId);
        }
        flags.setNavMenuLoadingStatus(false);
    }

    private void ToggleSubmenu()
    {
        areAllFoldersToggled = !areAllFoldersToggled;
    }

    private void ToggleTrash()
    {
        areTrashToggled = !areTrashToggled;
    }

    private void ToggleSubDirectory(Directory directory)
    {
        directory.IsToggled = !directory.IsToggled;
    }

    private string? GetCurrentUserId()
    {
        string? currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        return currentUserId;
    }

    private async Task<IEnumerable<Note>?> NotesSearch(string searchText)
    {
        if (currentUserId is not null)
        {
            notes = await _ns.SearchNotesByTitleAndContentAsync(searchText, currentUserId);
        }
        return notes;
    }

    private ICollection<Directory>? allCurrentSubdirectiories;

    private RenderFragment ToggleFolders(Directory? directory) => __builder =>
    {
        @if (directory == null)
        {
            <div class="my-options d-flex justify-content-center my-btn-add-main-folder my-custom-nav-item">
                <div class="my-options-child">
                    <i class="fa-solid fa-plus " @onclick="()=> HandleAddingFolderPopup(null)"></i>
                </div>
            </div>
            allCurrentSubdirectiories = _ds.GetAllDirectoriesWithoutParentDirectoryForParticularUserSync(currentUserId);
        }
        else
        {
            allCurrentSubdirectiories = _ds.GetAllSubDirectoriesOfParticularDirectorySync(directory.DirectoryId);
        }

        @if (allCurrentSubdirectiories is not null && allCurrentSubdirectiories.Count() > 0)
        {
            <div class="folder-note-margin-left">
                @foreach (var dir in allCurrentSubdirectiories)
                {
                    var notesFromCurrentSubirectory = _ns.GetAllNotesForParticularDirectory(dir.DirectoryId);
                    <div class="d-flex align-items-baseline justify-content-between nav-item my-nav-item dropdown-toggle nav-link my-custom-nav-item">
                        <div class="folder-child " @onclick="@(() => ToggleSubDirectory(dir))">
                            <i class="oi oi-folder" aria-hidden="true"></i>
                            @PrintName(dir.Name)
                            @if (dir.SubDirectories != null && dir.SubDirectories.Count() > 0 || notesFromCurrentSubirectory != null && notesFromCurrentSubirectory.Count() > 0)
                            {
                                if (!dir.IsToggled)
                                {
                                    <i class="fa-solid fa-chevron-down"></i>

                                }
                                else
                                {
                                    <i class="fa-solid fa-chevron-up"></i>
                                }

                            }
                        </div>
                        <div class="my-options d-flex">
                            <div class="my-options-child">
                                <i class="fa-solid fa-plus " @onclick="()=> HandleAddingFolderPopup(dir)"></i>
                            </div>
                            <div class="my-options-child">
                                <i class="fa-solid fa-ellipsis " @onclick="()=> HandleFolderPopup(dir)"></i>
                            </div>
                        </div>

                    </div>

                    @if (dir.IsToggled)
                    {
                        @ToggleFolders(dir)
                        ;
                    }
                }
            </div>

        }
        @GetNotesForCurrentDirectory(directory)
        ;

    };

    private RenderFragment ToggleFoldersInTrash(Directory? binDirectory) => __builder =>
       {
           ICollection<Directory>? allCurrentSubdirectiories;
           allCurrentSubdirectiories = _ds.GetAllSubDirectoriesOfParticularDirectorySync(binDirectory.DirectoryId); ;
           //parentDirsCountForBin = CountParentDir(binDirectory);

           @if (allCurrentSubdirectiories is not null)
           {
               <div class="folder-note-margin-left">
                   @foreach (var dir in allCurrentSubdirectiories)
                   {
                       <div class="d-flex align-items-baseline justify-content-between nav-item my-nav-item dropdown-toggle nav-link my-custom-nav-item" @onclick="@(() => ToggleSubDirectory(dir))">
                           <div class="folder-child">
                               <i class="oi oi-folder" aria-hidden="true"></i>
                               @PrintName(dir.Name)
                               @if (dir.SubDirectories != null && dir.SubDirectories.Count() > 0)
                               {
                                   if (!dir.IsToggled)
                                   {
                                       <i class="fa-solid fa-chevron-down"></i>
                                   }
                                   else
                                   {
                                       <i class="fa-solid fa-chevron-up"></i>
                                   }
                               }
                           </div>
                           <i class="fa-solid fa-ellipsis " @onclick="()=> HandleDeletedFolderPopup(dir)"></i>
                       </div>

                       @if (dir.IsToggled)
                       {
                           @ToggleFoldersInTrash(dir)
                           ;
                       }
                   }
               </div>
           }
           @GetNotesForCurrentDirectory(binDirectory)
           ;

       };

    private RenderFragment PrintName(string name) => __builder =>
    {
        @if (name.Count() > 10)
        {
            name = name.Remove(9);
            name += "...";
            <span class="p-1">@name</span>
        }
        else
        {
            <span class="p-1">@name</span>
        }
    };

    private void GoToNote(string Id)
    {
        NavigationManager.NavigateTo($"/editNote/{Id}"/*, forceLoad: true*/);
        //var note = _ns.GetNoteById(Guid.Parse(Id));
        //var currentUser = _ur.GetUserByIdSync(currentUserId);
        //if (note.IsCurrentlyEdited == false)
        //{
        //    note.IsCurrentlyEdited = true;
        //    note.EditedBy = currentUser;
        //    _ns.UpdateNoteSync(note);
        //    NavigationManager.NavigateTo($"/editNote/{Id}");
        //}
        //if (note.EditedBy == null)
        //    toastService.ShowError("You can't enter a note because no editBy is assigned and the condition can't be checked!");
        //else if (note.EditedBy.Id.Equals(currentUserId) && note.IsCurrentlyEdited == true)
        //{
        //    NavigationManager.NavigateTo($"/editNote/{Id}");
        //}
        //else
        //    toastService.ShowError("Note is currently edited by another user! You have to wait", "OOPS!");
    }

    private void NavigateToShared()
    {
        NavigationManager.NavigateTo("/sharedNotes");
    }

    private void NavigateToFeatures()
    {
        NavigationManager.NavigateTo("/features");
    }

    private void HandleNotesPopup(Note note)
    {
        var reloadedNote = _ns.GetNoteById(note.NoteId);
        if (reloadedNote.IsCurrentlyEdited == false || (reloadedNote.IsCurrentlyEdited == true && reloadedNote.EditedBy.Id.Equals(currentUserId)))
        {
            noteParameters = new ModalParameters();
            noteParameters.Add("NoteFromDB", reloadedNote);
            modal.Show<NoteMenu>
            (reloadedNote.Title, noteParameters, options);
        }
        else
        toastService.ShowError("Note is currently edited by another user! You have to wait", "OOPS!");
    }

    private void HandleDeletedNotesPopup(Note note)
    {
        noteParameters = new ModalParameters();
        noteParameters.Add("DeletedNoteFromDB", note);
        modal.Show<DeletedNoteMenu>
            (note.Title, noteParameters, options);
    }

    private void HandleFolderPopup(Directory directory)
    {
        folderParameters = new ModalParameters();
        folderParameters.Add("DirectoryFromDB", directory);
        modal.Show<FolderMenu>
            (directory.Name, folderParameters, options);
    }

    private void HandleDeletedFolderPopup(Directory directory)
    {
        folderParameters = new ModalParameters();
        folderParameters.Add("DeletedDirectoryFromDB", directory);
        modal.Show<DeletedFolderMenu>
            (directory.Name, folderParameters, options);
    }

    private void HandleAddingFolderPopup(Directory? directory)
    {
        addingFolderParameters = new ModalParameters();
        addingFolderParameters.Add("DirectoryFromDB", directory);
        if (directory is not null)
        {
            modal.Show<AddFolderMenu>
        (directory.Name, addingFolderParameters, options);
        }
        else
        {
            modal.Show<AddFolderMenu>
     ("Add new folder", addingFolderParameters, options);
        }

    }

    private int CountParentDir(Directory directory)
    {
        if (directory == null || directory.ParentDir is null)
            return 0;
        return 1 + CountParentDir(directory.ParentDir);
    }

    private int CountParentDirForNote(Note note)
    {
        if (note == null || note.Directory == null || note.Directory.ParentDir == null)
            return 0;
        return 1 + CountParentDir(note.Directory.ParentDir);
    }

    private RenderFragment GetNotesForCurrentDirectory(Directory? directory) => __builder =>
    {
        if (directory is null)
            return;
        var notes = _ns.GetAllNotesForParticularDirectory(directory!.DirectoryId);
        if (notes is not null && notes.Count() > 0)
        {
            <div class="folder-note-margin-left">
                @foreach (var note in notes)
                {
                    <div class="d-flex align-items-baseline justify-content-between nav-item my-nav-item dropdown-toggle nav-link my-custom-nav-item">
                        <div class="folder-child" @onclick="() => GoToNote(note.NoteId.ToString())">
                            <i>@note.IconName</i>
                            @PrintName(note.Title)
                        </div>
                        <div class="my-options">
                            <div class="my-options-child">
                                @if (note.IsMarkedAsDeleted)
                                {
                                    <i class="fa-solid fa-ellipsis " @onclick="()=> HandleDeletedNotesPopup(note)"></i>
                                }
                                else
                                {
                                    <i class="fa-solid fa-ellipsis " @onclick="()=> HandleNotesPopup(note)"></i>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    };
}