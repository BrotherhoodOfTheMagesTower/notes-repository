@inject Data.ViewOptionService ViewOption
@using Microsoft.Extensions.Localization
@using System.Security.Claims
@using NotesRepository.Repositories
@using Blazored.Typeahead
@using Data.Models
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource> localizer
@inject UserRepository _ur;
@inject DirectoryRepository _dr;
@inject IModalService modal;


<nav class="flex-column navigation">
    <div class="top-row ps-3 navbar navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/Home">NotesRepository</a>
        </div>
    </div>
    <br />

    <AuthorizeView>
        <Authorized>
            <BlazoredTypeahead SearchMethod="NotesSearch" @bind-Value="searchPhrase">
                <SelectedTemplate Context="searchContext">
                    @searchContext.Content
                </SelectedTemplate>
                <ResultTemplate Context="resultContext">
                    @resultContext.Content
                </ResultTemplate>
                <NotFoundTemplate Context="notFoundContext">
                    Sorry, there weren't any search results.
                </NotFoundTemplate>
            </BlazoredTypeahead>
            <br />
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/editNote/-1">
                    <span class="oi oi-copywriting" aria-hidden="true"></span> @localizer["newNote"]
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/Home" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> @localizer["homePage"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/calendar">
                    <span class="oi oi-calendar" aria-hidden="true"></span> @localizer["calendar"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="dropdown-toggle nav-link" @onclick="() => ToggleSubmenu()">
                    <span class="oi oi-folder" aria-hidden="true"></span>@localizer["folders"]
                </NavLink>
            </div>

            @if (areAllFoldersToggled)
            {

                @if (mainDirs is not null)
                {
                    @ToggleFolders(null)
                    ;

                }
            }
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/selectTemplate">
                    <span class="oi oi-text" aria-hidden="true"></span> @localizer["templates"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="dropdown-toggle nav-link">
                    <span class="oi oi-share" aria-hidden="true"></span> @localizer["shared"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="dropdown-toggle nav-link">
                    <span class="oi oi-trash" aria-hidden="true"></span> @localizer["trash"]
                </NavLink>
            </div>
        </Authorized>
    </AuthorizeView>
</nav>


@code {
    protected override async Task OnInitializedAsync()
    {
        mainDirs = await GetAllUserMainDirectories();
    }

    private bool collapseNavMenu = true;
    private bool areAllFoldersToggled = false;


    private ICollection<Directory>? mainDirs;
    public Note searchPhrase;
    private bool searching = false;
    private List<Note> notes;
    private ModalOptions options = new ModalOptions()
        {

            Animation = ModalAnimation.FadeInOut(0.1),
        };


    protected override void OnInitialized()
    {
        notes = new List<Note>
            {
                new Note("Ala ma kota"),
                new Note("Ala Jakaś"),
                new Note("Taaa"),
            };
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ToggleSubmenu()
    {
        areAllFoldersToggled = !areAllFoldersToggled;
    }

    private void ToggleSubDirectory(Directory directory)
    {
        directory.IsToggled = !directory.IsToggled;
        ToggleFolders(directory);

    }

    private async Task<IEnumerable<Note>> NotesSearch(string searchText)
    {
        return notes;
    }

    private async Task<ICollection<Directory>?> GetAllUserMainDirectories()
    {
        string? currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (currentUserId is not null)
        {
            var allDirs = await _dr.GetAllDirectoriesForParticularUserAsync(currentUserId);
            return allDirs.Where(x => x.ParentDir == null && x.Name != "Bin").ToList();
        }
        return null;
    }

    private ICollection<Directory>? GetAllSubDirectoriesForSpecificDirectory(Guid directoryId)
    => _dr.GetAllSubDirectoriesOfParticularDirectorySync(directoryId);

    private void SearchPhrase()
    {
        // Wywołanie funkcji szukającej
        if (searchPhrase == null)
        {
            searching = false;
        }
        else
        {
            searching = true;
        }
    }

    private RenderFragment ToggleFolders(Directory? currentDir)
    {
        ICollection<Directory>? allCurrentSubdirectiories;

        if (currentDir == null)
        {
            allCurrentSubdirectiories = mainDirs;
        }
        else
        {
            allCurrentSubdirectiories = GetAllSubDirectoriesForSpecificDirectory(currentDir.DirectoryId);
        }


        return
    @<div>
        @if (allCurrentSubdirectiories is not null)
            {

                foreach (var dir in allCurrentSubdirectiories)
                {
                    if (dir.SubDirectories is not null)
                    {
                        <div class="nav-item my-nav-item">
                            <NavLink class="dropdown-toggle nav-link justify-content-between" @onclick="@(() => ToggleSubDirectory(dir))">
                                <div class="my-inside-nav-link">
                                    <i class="oi oi-folder" aria-hidden="true"></i>
                                    @PrintDirectoryName(dir)
                                    <i class="fa-solid fa-chevron-down"></i>
                                </div>
                                <i class="fa-solid fa-ellipsis " @onclick="@(() => modal.Show<FolderMenu>(@dir.Name,options))"></i>
                            </NavLink>
                        </div>
                        if (dir.IsToggled)
                        {
                            foreach (var subDir in dir.SubDirectories)
                            {
                                @if (subDir.SubDirectories is not null)
                                {
                                    <div class="nav-item my-nav-item">
                                        <NavLink class="dropdown-toggle nav-link justify-content-between" @onclick="() => ToggleSubDirectory(subDir)">
                                            <div class="my-inside-nav-link">
                                                <i class="oi oi-folder" aria-hidden="true"></i>
                                                @PrintDirectoryName(subDir)
                                                <i class="fa-solid fa-chevron-down"></i>
                                            </div>
                                            <i class="fa-solid fa-ellipsis " @onclick="@(() => modal.Show<FolderMenu>(@subDir.Name,options))"></i>
                                        </NavLink>
                                    </div>
                                }
                                else
                                {
                                    <div class="nav-item my-nav-item">
                                        <NavLink class="nav-link justify-content-between" href="#">
                                            <div class="my-inside-nav-link">
                                                <i class="oi oi-folder" aria-hidden="true"></i>
                                                @PrintDirectoryName(subDir)
                                                <i class="fa-solid fa-chevron-down"></i>
                                            </div>
                                            <i class="fa-solid fa-ellipsis" @onclick="@(() => modal.Show<FolderMenu>(@subDir.Name,options))"></i>
                                        </NavLink>
                                    </div>
                                }

                            }
                            if (dir.Notes is not null)
                            {
                                foreach (var note in dir.Notes)
                                {
                                    <div class="nav-item my-nav-item">
                                        <NavLink class="dropdown-toggle nav-link justify-content-between" @onclick="() => GoToNote(note)">
                                            <div class="my-inside-nav-link">
                                                <i class="oi oi-file" aria-hidden="true"></i>
                                                @note.Title
                                            </div>
                                        </NavLink>
                                    </div>
                                }
                            }
                        }
                    }

                    else
                    {
                        <div class="nav-item my-nav-item">
                            <NavLink class="nav-link justify-content-between" href="#">
                                <div class="my-inside-nav-link">
                                    <i class="oi oi-folder" aria-hidden="true"></i>
                                    @PrintDirectoryName(dir);
                                    <i class="fa-solid fa-ellipsis " @onclick="@(() => modal.Show<FolderMenu>(@dir.Name,options))"></i>
                                </div>
                            </NavLink>
                        </div>
                    }
                }
            }
        </div>
    ;
    }
    private RenderFragment PrintDirectoryName(Directory dir)
    {
        string name = dir.Name;
        return
    @<span>
        @if (@dir.Name.Count() > 7)
            {
                name = name.Remove(6);
                name += "...";
                <span class="p-1">@name</span>
            }
            else
            {
                <span class="p-1">@name</span>
            }
        </span>
    ;
    }

    //toDo implement this fuction
    private async Task GoToNote(Note note)
    {

    }

}
