@using NotesRepository.Services;
@using NotesRepository.Data;
@using NotesRepository.Data.Models;
@using NotesRepository.Repositories;
@using System.Security.Claims;
@using System.ComponentModel.DataAnnotations;

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor;
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource> localizer;
@inject NavigationManager navigationManager;
@inject UserRepository _ur;
@inject DirectoryService _ds;
@inject IToastService toastService;

<EditForm Model="@inputFromUser" OnValidSubmit="SaveFolder">
    <DataAnnotationsValidator />
    <div class="options-menu">

        <div class="my-nav-item px-3 py-1 d-flex justify-content-between ">
            <div>
                <span class="oi oi-brush" aria-hidden="true"></span> @localizer["name"]
            </div>
            @if (inputFromUser is not null)
            {
                <row>
                    <InputText id="directoryTitle" @bind-Value="@inputFromUser.Title" class="my-input"></InputText>
                    <ValidationMessage For="() => inputFromUser.Title" />
                </row>
            }

        </div>
    </div>
    <center>
        <button type="submit" class="btn btn-primary">@localizer["save"]</button>
    </center>
</EditForm>


@code
{
    [CascadingParameter] BlazoredModalInstance? ModalInstance { get; set; }
    [Parameter] public string Title { get; set; } = "New folder";
    [Parameter] public Directory? DirectoryFromDB { get; set; } = null;
    private Directory? selectedDirectory;
    private FolderValidation? inputFromUser;
    string? currentUserId;

    protected override void OnInitialized()
    {
        currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (DirectoryFromDB is not null)
        {
            inputFromUser = new FolderValidation("");
        }
    }
    private async Task SaveFolder()
    {
        try
        {
            if (inputFromUser is not null && currentUserId is not null)
            {
                await ValidateDirectory(inputFromUser.Title, currentUserId);
                if (currentUserId != null)
                {
                    var usr = await _ur.GetUserByIdAsync(currentUserId);
                    var folderExists = await _ds.CheckIfTheFolderTitleExistsForParticularUser(inputFromUser.Title, currentUserId);

                         if(folderExists == true)
                    toastService.ShowError(localizer["errorWhileRenaming"], "OOPS!");

                    else if (usr is not null && DirectoryFromDB is not null )
                    {
                        selectedDirectory = new Directory(inputFromUser.Title, usr);
                        selectedDirectory.ParentDir = DirectoryFromDB;


                        var result = await _ds.AddDirectoryAsync(selectedDirectory);
                        result = await _ds.UpdateAsync(selectedDirectory);

                        if (result)
                            toastService.ShowSuccess(localizer["folderCreated"], localizer["congrats"]);
                        else
                        {
                            toastService.ShowError(localizer["errorWhileCreatingFolder"], "OOPS!");
                        }
                        SubmitForm(DirectoryFromDB);
                    }
                }
            }
        }
        catch (Exception e)
        {
            toastService.ShowError(e.Message, "OOPS!");
        }
    }

    private void SubmitForm(Directory directory)
    {
        ModalInstance?.CloseAsync(ModalResult.Ok(directory.DirectoryId.ToString()));
    }

    private async Task ValidateDirectory(string name, string currentUserId)
    {
        if (currentUserId is not null)
        {
            var userId = currentUserId;
            if (userId != null)
            {
                var tempSelectedDirectory = await _ds.GetDirectoryByNameAsync(name, userId);
                if (tempSelectedDirectory != null)
                    throw new Exception(localizer["folderExists"]);
            }
        }
    }

    public class FolderValidation
    {
        public FolderValidation(string title)
        {
            Title = title;
        }

        [Required(ErrorMessage = "Required field!")]
        [StringLength(32, ErrorMessage = "Too long!")]
        [MinLength(2, ErrorMessage = "Too short!")]
        public string Title { get; set; }

    }
}