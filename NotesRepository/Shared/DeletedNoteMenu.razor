@using NotesRepository.Services;
@using NotesRepository.Data;
@using NotesRepository.Data.Models;
@using NotesRepository.Data.Constants
@using NotesRepository.Repositories;
@using System.Security.Claims;
@using System.ComponentModel.DataAnnotations;

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor;
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource> localizer;
@inject NavigationManager navigationManager;
@inject UserRepository _ur;
@inject DirectoryService _ds;
@inject NoteService _ns;
@inject IToastService toastService;

<EditForm Model="@inputFromUser" OnValidSubmit="saveNote">
    <DataAnnotationsValidator />
    <div class="options-menu">

        <div class="my-nav-item px-3 py-1 my-nav-item-hover" @onclick="() => DeleteNote(DeletedNoteFromDB)">
            <span class="oi oi-trash" aria-hidden="true"></span> @localizer["deleteNotePermanently"]
        </div>
        <div class="my-nav-item px-3 py-1 d-flex justify-content-between ">
            <div>
                <span class="oi oi-brush" aria-hidden="true"></span> @localizer["restoreNote"]

            </div>
            @if (inputFromUser is not null)
            {
                @if (directoriesList is not null && DeletedNoteFromDB is not null)
                {
                    <row class="ps-2">
                        <InputSelect id="noteTitle" @bind-Value="@inputFromUser.Directory" class="my-input">
                            @foreach (var d in directoriesList)
                            {
                        @if (d != DeletedNoteFromDB.Directory)
                                {
                            <option value="@d.Name">@d.Name</option>
                                }
                            }

                </InputSelect>

                <ValidationMessage For="() => inputFromUser.Directory" />
            </row>
                }

            }
        </div>

    </div>
    <center>
        <button type="submit" class="btn btn-primary">@localizer["save"]</button>
    </center>
</EditForm>


@code
{
    [CascadingParameter] BlazoredModalInstance? ModalInstance { get; set; }
    [Parameter] public string Title { get; set; } = "New note";
    [Parameter] public string IconName { get; set; } = "📜";
    [Parameter] public Note? DeletedNoteFromDB { get; set; } = null;
    private Directory? selectedDirectory;
    private DeletedNoteValidation? inputFromUser;
    string? currentUserId;
    private List<Directory>? directoriesList;

    protected override async Task OnInitializedAsync()
    {
        currentUserId = httpContextAccessor.HttpContext!.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (DeletedNoteFromDB is null || currentUserId is null)
            return;

        inputFromUser = new DeletedNoteValidation(DeletedNoteFromDB.Directory.Name);
        var tempDirectories = (await _ds.GetAllNotDeletedDirectoriesForParticularUserAsync(currentUserId));

        if (tempDirectories is null)
            return;

        directoriesList = tempDirectories.ToList();
        directoriesList.Sort((x, y) => string.Compare(x.Name, y.Name));

    }
    private async Task saveNote()
    {
        try
        {
            if (inputFromUser is not null && currentUserId is not null)
            {
                await ValidateDirectory(inputFromUser.Directory, currentUserId);
                if (currentUserId != null)
                {
                    var usr = await _ur.GetUserByIdAsync(currentUserId);
                    if (usr is not null && selectedDirectory is not null && DeletedNoteFromDB is not null)
                    {
                        Directory? tempDirectory = await _ds.GetDirectoryByNameAsync(inputFromUser.Directory, currentUserId);
                        if (tempDirectory is not null)
                        {
                            var result = await (_ns.RestoreASingleNoteFromTheBinAsync(DeletedNoteFromDB.NoteId, tempDirectory.DirectoryId));

                            if (result)
                                toastService.ShowSuccess("The note has been restored.", "Congrats!");
                            else
                            {
                                toastService.ShowError("An error occurred while restoring note.", "OOPS!");
                            }
                        }
                        else
                        {
                            toastService.ShowError("An error occurred while restoring note.", "OOPS!");
                        }
                        submitForm(DeletedNoteFromDB);
                    }
                }
            }
        }
        catch (Exception e)
        {
            toastService.ShowError(e.Message, "OOPS!");
        }
    }

    private void submitForm(Note note)
    {
        ModalInstance?.CloseAsync(ModalResult.Ok(note.NoteId.ToString()));
    }

    private async Task ValidateDirectory(string name, string currentUserId)
    {
        if (currentUserId is not null)
        {
            var userId = currentUserId;
            if (userId != null)
            {
                selectedDirectory = await _ds.GetDirectoryByNameAsync(name, userId);
                if (selectedDirectory == null)
                    throw new Exception("There is no such folder!");
            }
        }
    }

    private async Task DeleteNote(Note? note)
    {
        if (note is not null)
        {
            var result = await _ns.DeleteNoteByIdAsync(DeletedNoteFromDB.NoteId);
            if (result)
                toastService.ShowSuccess("The note has been removed.", "Congrats!");
            else
            {
                toastService.ShowError("An error occurred while removing note.", "OOPS!");
            }
        }
    }
}